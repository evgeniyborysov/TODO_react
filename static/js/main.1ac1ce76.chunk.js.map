{"version":3,"sources":["components/Button.tsx","components/EditableSpan.tsx","components/TodoListInputFull.tsx","components/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","className","onClick","callBack","name","EditableSpan","useState","editMode","setEditMode","title","setTitle","autoFocus","onChange","event","currentTarget","value","onBlur","onDoubleClick","TodoListInputFull","inputValue","setInputValue","error","setError","addTitle","trim","onKeyPress","key","TodoList","onClickFilterButtonHandler","filterValue","todoListID","filterTasks","todolistsID","editTodoListTitle","removeTodoList","task","addTODO","tasks","map","id","type","checked","isDone","changeTaskStatus","taskID","editTaskTitle","removeTask","filter","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","td","find","filetValue","todolist","tl","console","log","newTodoListID","filteredTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1ac1ce76.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    className?: string;\r\n    name: string;\r\n    callBack: () => void;\r\n};\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    const onClickButtonHandler = () => {\r\n        props.callBack();\r\n    };\r\n\r\n    return (\r\n        <button\r\n            className={props.className}\r\n            onClick={() => {\r\n                onClickButtonHandler();\r\n            }}\r\n        >\r\n            {props.name}\r\n        </button>\r\n    );\r\n};\r\n","import React, { ChangeEvent, useState } from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string;\r\n    onChange: (title: string) => void;\r\n};\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    };\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    };\r\n    const onChangeTitleHandler = (event: ChangeEvent<HTMLInputElement>) =>\r\n        setTitle(event.currentTarget.value);\r\n\r\n    return editMode ? (\r\n        <input\r\n            autoFocus\r\n            onChange={onChangeTitleHandler}\r\n            onBlur={activateViewMode}\r\n            value={title}\r\n        />\r\n    ) : (\r\n        <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    );\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\n\r\ntype TodoListInputPropsType = {\r\n    callBack: (inputValue: string) => void;\r\n};\r\n\r\nexport const TodoListInputFull: React.FC<TodoListInputPropsType> = ({\r\n    callBack,\r\n}) => {\r\n    let [inputValue, setInputValue] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const addTitle = (inputValue: string) => {\r\n        const title = inputValue.trim();\r\n        if (title !== \"\") {\r\n            callBack(title);\r\n            setInputValue(\"\");\r\n        } else {\r\n            setError(\"Title is required!\");\r\n        }\r\n    };\r\n\r\n    const onKeyPressInputHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (event.key === \"Enter\") {\r\n            setInputValue(event.currentTarget.value);\r\n            addTitle(inputValue);\r\n        }\r\n    };\r\n\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(event.currentTarget.value);\r\n    };\r\n    const onClickButtonHandler = () => {\r\n        addTitle(inputValue);\r\n        setInputValue(\"\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                className={error ? \"error\" : \"\"}\r\n                value={inputValue}\r\n                onChange={onChangeInputHandler}\r\n                onKeyPress={onKeyPressInputHandler}\r\n            />\r\n            <button onClick={onClickButtonHandler}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n","import React, { ChangeEvent } from \"react\";\r\nimport { FilterValueType } from \"../App\";\r\nimport { Button } from \"./Button\";\r\nimport { EditableSpan } from \"./EditableSpan\";\r\n// import { Input } from \"./Input\";\r\nimport { TodoListInputFull } from \"./TodoListInputFull\";\r\n\r\nexport type TodoListTaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n};\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string;\r\n    filter: FilterValueType;\r\n    title: string;\r\n    tasks: Array<TodoListTaskType>;\r\n    removeTask: (taskID: string, todolistsID: string) => void;\r\n    filterTasks: (filetValue: FilterValueType, todoListID: string) => void;\r\n    addTODO: (title: string, todoListID: string) => void;\r\n    changeTaskStatus: (\r\n        taskID: string,\r\n        isDone: boolean,\r\n        todolistsID: string\r\n    ) => void;\r\n    removeTodoList: (todoListID: string) => void;\r\n    editTaskTitle: (todolistsID: string, taskID: string, title: string) => void;\r\n    editTodoListTitle: (todolistsID: string, title: string) => void;\r\n};\r\n\r\nexport const TodoList = (props: TodoListPropsType) => {\r\n    const onClickFilterButtonHandler = (\r\n        filterValue: FilterValueType,\r\n        todoListID: string\r\n    ) => {\r\n        props.filterTasks(filterValue, todoListID);\r\n    };\r\n\r\n    const onClickRemoveTaskHandler = (id: string, todolistsID: string) => {\r\n        props.removeTask(id, todolistsID);\r\n    };\r\n\r\n    const onClickChangeTaskStatusHandler = (\r\n        id: string,\r\n        isDone: boolean,\r\n        todolistsID: string\r\n    ) => {\r\n        props.changeTaskStatus(id, isDone, todolistsID);\r\n    };\r\n\r\n    const editTaskTitle = (\r\n        todolistsID: string,\r\n        taskID: string,\r\n        title: string\r\n    ) => {\r\n        props.editTaskTitle(todolistsID, taskID, title);\r\n    };\r\n\r\n    const editTodoListTitle = (todolistsID: string, title: string) => {\r\n        props.editTodoListTitle(todolistsID, title);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {/* <h3>{props.title}</h3> */}\r\n                <EditableSpan\r\n                    title={props.title}\r\n                    onChange={(title) => {\r\n                        editTodoListTitle(props.todoListID, title);\r\n                    }}\r\n                />\r\n                <Button\r\n                    name={\"✖\"}\r\n                    callBack={() => props.removeTodoList(props.todoListID)}\r\n                />\r\n            </div>\r\n\r\n            <TodoListInputFull\r\n                callBack={(task: string) =>\r\n                    props.addTODO(task, props.todoListID)\r\n                }\r\n            />\r\n            {/* <Input\r\n                className={error ? \"error\" : \"\"}\r\n                inputValue={inputValue}\r\n                setInputValue={setInputValue}\r\n                addTODO={addTODO}\r\n                setError={setError}\r\n                todoListID={props.todoListID}\r\n            /> */}\r\n            {/* <Button name={\"+\"} callBack={addTODO} /> */}\r\n            <ul>\r\n                {props.tasks.map((task) => {\r\n                    return (\r\n                        <li key={task.id}>\r\n                            <label>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={task.isDone}\r\n                                    onChange={(\r\n                                        event: ChangeEvent<HTMLInputElement>\r\n                                    ) =>\r\n                                        onClickChangeTaskStatusHandler(\r\n                                            task.id,\r\n                                            event.currentTarget.checked,\r\n                                            props.todoListID\r\n                                        )\r\n                                    }\r\n                                />\r\n                                {/* <span className={task.isDone ? \"isDone\" : \"\"}>\r\n                                    {task.title}****\r\n                                </span> */}\r\n                                <EditableSpan\r\n                                    title={task.title}\r\n                                    onChange={(title) => {\r\n                                        editTaskTitle(\r\n                                            props.todoListID,\r\n                                            task.id,\r\n                                            title\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </label>\r\n\r\n                            <Button\r\n                                name={\"✖\"}\r\n                                callBack={() =>\r\n                                    onClickRemoveTaskHandler(\r\n                                        task.id,\r\n                                        props.todoListID\r\n                                    )\r\n                                }\r\n                            />\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    className={props.filter === \"All\" ? \"active\" : \"\"}\r\n                    name={\"All\"}\r\n                    callBack={() =>\r\n                        onClickFilterButtonHandler(\"All\", props.todoListID)\r\n                    }\r\n                />\r\n                <Button\r\n                    className={props.filter === \"Active\" ? \"active\" : \"\"}\r\n                    name={\"Active\"}\r\n                    callBack={() =>\r\n                        onClickFilterButtonHandler(\"Active\", props.todoListID)\r\n                    }\r\n                />\r\n                <Button\r\n                    className={props.filter === \"Completed\" ? \"active\" : \"\"}\r\n                    name={\"Completed\"}\r\n                    callBack={() =>\r\n                        onClickFilterButtonHandler(\r\n                            \"Completed\",\r\n                            props.todoListID\r\n                        )\r\n                    }\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { TodoList, TodoListTaskType } from \"./components/TodoList\";\r\nimport { v1 } from \"uuid\";\r\nimport { TodoListInputFull } from \"./components/TodoListInputFull\";\r\n\r\nexport type FilterValueType = \"All\" | \"Active\" | \"Completed\";\r\n\r\ntype TodoListsType = {\r\n    id: string;\r\n    title: string;\r\n    filter: FilterValueType;\r\n};\r\n\r\ntype TasksType = {\r\n    [key: string]: Array<TodoListTaskType>;\r\n};\r\n\r\nfunction App() {\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodoListsType>>([\r\n        { id: todolistID1, title: \"What to learn\", filter: \"All\" },\r\n        { id: todolistID2, title: \"What to buy\", filter: \"All\" },\r\n    ]);\r\n\r\n    let [tasks, setTasks] = useState<TasksType>({\r\n        [todolistID1]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true },\r\n            { id: v1(), title: \"ReactJS\", isDone: false },\r\n            { id: v1(), title: \"Rest API\", isDone: false },\r\n            { id: v1(), title: \"GraphQL\", isDone: false },\r\n        ],\r\n        [todolistID2]: [\r\n            { id: v1(), title: \"Milk\", isDone: true },\r\n            { id: v1(), title: \"Eggs\", isDone: true },\r\n            { id: v1(), title: \"Meat\", isDone: false },\r\n            { id: v1(), title: \"Pizza\", isDone: false },\r\n            { id: v1(), title: \"Vine\", isDone: false },\r\n        ],\r\n    });\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1();\r\n        const newTodoList: TodoListsType = {\r\n            id: newTodoListID,\r\n            title: title,\r\n            filter: \"All\",\r\n        };\r\n        setTodolists([newTodoList, ...todolists]);\r\n        setTasks({ ...tasks, [newTodoListID]: [] });\r\n    }\r\n\r\n    const removeTodoList = (todoListID: string) => {\r\n        setTodolists(todolists.filter((td) => td.id !== todoListID));\r\n        delete tasks[todoListID];\r\n        setTasks({ ...tasks });\r\n    };\r\n\r\n    const addTODO = (title: string, todoListID: string) => {\r\n        const task = { id: v1(), title: title, isDone: false };\r\n        // const todolistTasks = tasks[todoListID];\r\n        // const newTasks = [task, ...todolistTasks];\r\n        // tasks[todoListID] = newTasks;\r\n        setTasks({ ...tasks, [todoListID]: [task, ...tasks[todoListID]] });\r\n    };\r\n\r\n    const changeTaskStatus = (\r\n        taskID: string,\r\n        isDone: boolean,\r\n        todolistsID: string\r\n    ) => {\r\n        let todoListTasks = tasks[todolistsID];\r\n        let task = todoListTasks.find((task) => task.id === taskID);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({ ...tasks });\r\n        }\r\n    };\r\n\r\n    function filterTasks(filetValue: FilterValueType, todolistsID: string) {\r\n        let todolist = todolists.find((tl) => tl.id === todolistsID);\r\n        if (todolist) {\r\n            todolist.filter = filetValue;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    function removeTask(taskID: string, todolistsID: string) {\r\n        // tasks = tasks.filter((task) => task.id !== taskID);\r\n        // setTasks(tasks);\r\n        setTasks({\r\n            ...tasks,\r\n            [todolistsID]: tasks[todolistsID].filter(\r\n                (task) => task.id !== taskID\r\n            ),\r\n        });\r\n    }\r\n\r\n    function editTaskTitle(todolistsID: string, taskID: string, title: string) {\r\n        console.log(tasks[todolistsID]);\r\n        setTasks({\r\n            ...tasks,\r\n            [todolistsID]: tasks[todolistsID].map((task) =>\r\n                task.id === taskID ? { ...task, title: title } : task\r\n            ),\r\n        });\r\n    }\r\n\r\n    function editTodoListTitle(todolistsID: string, title: string) {\r\n        setTodolists(\r\n            todolists.map((td) =>\r\n                td.id === todolistsID ? { ...td, title: title } : td\r\n            )\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <TodoListInputFull callBack={addTodoList} />\r\n            {todolists.map((td) => {\r\n                let filteredTasks = tasks[td.id];\r\n\r\n                if (td.filter === \"Active\") {\r\n                    filteredTasks = filteredTasks.filter(\r\n                        (task) => !task.isDone\r\n                    );\r\n                }\r\n                if (td.filter === \"Completed\") {\r\n                    filteredTasks = filteredTasks.filter((task) => task.isDone);\r\n                }\r\n                return (\r\n                    <TodoList\r\n                        key={td.id}\r\n                        todoListID={td.id}\r\n                        filter={td.filter}\r\n                        title={td.title}\r\n                        tasks={filteredTasks}\r\n                        removeTask={removeTask}\r\n                        filterTasks={filterTasks}\r\n                        addTODO={addTODO}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        editTaskTitle={editTaskTitle}\r\n                        editTodoListTitle={editTodoListTitle}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}