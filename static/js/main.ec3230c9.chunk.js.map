{"version":3,"sources":["components/Button.tsx","components/Input.tsx","components/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","onClick","callBack","name","Input","value","inputValue","onChange","event","setinputValue","currentTarget","TodoList","title","addTODO","tasks","map","task","key","id","type","checked","isDone","removeTask","filterTasks","App","useState","setTasks","console","log","Date","now","Math","random","filter","setFilter","filteredTasks","className","taskID","filetValue","addTask","newTask","TODO","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sPAOaA,G,MAAS,SAACC,GAKnB,OAAO,4BAAQC,QAJc,WACzBD,EAAME,aAGqCF,EAAMG,QCL5CC,EAAQ,SAACJ,GAKlB,OAAO,2BAAOK,MAAOL,EAAMM,WAAYC,SAJV,SAACC,GAC1BR,EAAMS,cAAcD,EAAME,cAAcL,WCcnCM,EAAW,SAACX,GACrB,OACI,6BACI,4BAAKA,EAAMY,OAEX,kBAAC,EAAD,CACIN,WAAYN,EAAMM,WAClBG,cAAeT,EAAMS,gBAEzB,kBAAC,EAAD,CAAQN,KAAM,IAAKD,SAAUF,EAAMa,UACnC,4BACKb,EAAMc,MAAMC,KAAI,SAACC,GACd,OACI,wBAAIC,IAAKD,EAAKE,IACV,2BAAOC,KAAK,WAAWC,QAASJ,EAAKK,SACrC,8BAAOL,EAAKJ,OACZ,4BAAQX,QAAS,kBAAMD,EAAMsB,WAAWN,EAAKE,MAA7C,eAOhB,6BACI,4BAAQjB,QAAS,kBAAMD,EAAMuB,YAAY,SAAzC,OACA,4BAAQtB,QAAS,kBAAMD,EAAMuB,YAAY,YAAzC,UAGA,4BAAQtB,QAAS,kBAAMD,EAAMuB,YAAY,eAAzC,gBCgBDC,MA7Df,WACI,MAAwBC,mBAAS,CAC7B,CAAEP,GAAI,EAAGN,MAAO,WAAYS,QAAQ,GACpC,CAAEH,GAAI,EAAGN,MAAO,KAAMS,QAAQ,GAC9B,CAAEH,GAAI,EAAGN,MAAO,UAAWS,QAAQ,GACnC,CAAEH,GAAI,EAAGN,MAAO,WAAYS,QAAQ,GACpC,CAAEH,GAAI,EAAGN,MAAO,UAAWS,QAAQ,KALvC,mBAAKP,EAAL,KAAYY,EAAZ,KAQA,EAAkCD,mBAAS,IAA3C,mBAAKnB,EAAL,KAAiBG,EAAjB,KACAkB,QAAQC,IAAItB,EAAY,MAExB,IAAMY,EAAK,kBAAMW,KAAKC,MAAQC,KAAKC,UAanC,EAA0BP,mBAA0B,OAApD,mBAAKQ,EAAL,KAAaC,EAAb,KAEIC,EAAgBrB,EAkBpB,MAhBe,WAAXmB,IACAE,EAAgBA,EAAcF,QAAO,SAACjB,GAAD,OAAWA,EAAKK,WAE1C,cAAXY,IACAE,EAAgBA,EAAcF,QAAO,SAACjB,GAAD,OAAUA,EAAKK,WAapD,yBAAKe,UAAU,OACX,kBAAC,EAAD,CACIxB,MAAO,gBACPE,MAAOqB,EACPb,WAVZ,SAAoBe,GAChBvB,EAAQA,EAAMmB,QAAO,SAACjB,GAAD,OAAUA,EAAKE,KAAOmB,KAC3CX,EAASZ,IASDS,YAfZ,SAAqBe,GACjBJ,EAAUI,IAeFC,QAhCI,SAACvB,GACb,IAAMwB,EAAU,CAAEtB,GAAIA,IAAMN,MAAOI,EAAMK,QAAQ,GACjDK,EAAS,CAACc,GAAF,mBAAc1B,MA+BdR,WAAYA,EACZG,cAAeA,EACfI,QAzCI,WACZ,IAAM4B,EAAO,CAAEvB,GAAIA,IAAMN,MAAON,EAAYe,QAAQ,GACpDK,EAAS,CAACe,GAAF,mBAAW3B,KACnBL,EAAc,SCXFiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.ec3230c9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string;\r\n    callBack: () => void;\r\n};\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    const onClickButtonHandler = () => {\r\n        props.callBack();\r\n    };\r\n\r\n    return <button onClick={onClickButtonHandler}>{props.name}</button>;\r\n};\r\n","import React, { ChangeEvent } from \"react\";\r\n\r\ntype InputPropsType = {\r\n    inputValue: string;\r\n    setinputValue: (inputValue: string) => void;\r\n};\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.setinputValue(event.currentTarget.value);\r\n    };\r\n\r\n    return <input value={props.inputValue} onChange={onChangeInputHandler} />;\r\n};\r\n","import React from \"react\";\r\nimport { FilterValueType } from \"../App\";\r\nimport { Button } from \"./Button\";\r\nimport { Input } from \"./Input\";\r\n// import { TodoListInputFull } from \"./TodoListInputFull\";\r\n\r\ntype TodoListTaskType = {\r\n    id: number;\r\n    title: string;\r\n    isDone: boolean;\r\n};\r\n\r\ntype TodoListPropsType = {\r\n    title: string;\r\n    tasks: Array<TodoListTaskType>;\r\n    removeTask: (taskID: number) => void;\r\n    filterTasks: (filetValue: FilterValueType) => void;\r\n    addTask: (task: string) => void;\r\n    inputValue: string;\r\n    setinputValue: (inputValue: string) => void;\r\n    addTODO: () => void;\r\n};\r\n\r\nexport const TodoList = (props: TodoListPropsType) => {\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n            {/* <TodoListInputFull addTask={props.addTask} /> */}\r\n            <Input\r\n                inputValue={props.inputValue}\r\n                setinputValue={props.setinputValue}\r\n            />\r\n            <Button name={\"+\"} callBack={props.addTODO} />\r\n            <ul>\r\n                {props.tasks.map((task) => {\r\n                    return (\r\n                        <li key={task.id}>\r\n                            <input type=\"checkbox\" checked={task.isDone} />\r\n                            <span>{task.title}</span>\r\n                            <button onClick={() => props.removeTask(task.id)}>\r\n                                âœ–\r\n                            </button>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n            <div>\r\n                <button onClick={() => props.filterTasks(\"All\")}>All</button>\r\n                <button onClick={() => props.filterTasks(\"Active\")}>\r\n                    Active\r\n                </button>\r\n                <button onClick={() => props.filterTasks(\"Completed\")}>\r\n                    Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { TodoList } from \"./components/TodoList\";\r\n\r\nexport type FilterValueType = \"All\" | \"Active\" | \"Completed\";\r\n\r\nfunction App() {\r\n    let [tasks, setTasks] = useState([\r\n        { id: 1, title: \"HTML&CSS\", isDone: true },\r\n        { id: 2, title: \"JS\", isDone: true },\r\n        { id: 3, title: \"ReactJS\", isDone: false },\r\n        { id: 4, title: \"Rest API\", isDone: false },\r\n        { id: 5, title: \"GraphQL\", isDone: false },\r\n    ]);\r\n\r\n    let [inputValue, setinputValue] = useState(\"\");\r\n    console.log(inputValue, \"17\");\r\n\r\n    const id = () => Date.now() + Math.random();\r\n\r\n    const addTODO = () => {\r\n        const TODO = { id: id(), title: inputValue, isDone: false };\r\n        setTasks([TODO, ...tasks]);\r\n        setinputValue(\"\");\r\n    };\r\n\r\n    const addTask = (task: string) => {\r\n        const newTask = { id: id(), title: task, isDone: false };\r\n        setTasks([newTask, ...tasks]);\r\n    };\r\n\r\n    let [filter, setFilter] = useState<FilterValueType>(\"All\");\r\n\r\n    let filteredTasks = tasks;\r\n\r\n    if (filter === \"Active\") {\r\n        filteredTasks = filteredTasks.filter((task) => !task.isDone);\r\n    }\r\n    if (filter === \"Completed\") {\r\n        filteredTasks = filteredTasks.filter((task) => task.isDone);\r\n    }\r\n\r\n    function filterTasks(filetValue: FilterValueType) {\r\n        setFilter(filetValue);\r\n    }\r\n\r\n    function removeTask(taskID: number) {\r\n        tasks = tasks.filter((task) => task.id !== taskID);\r\n        setTasks(tasks);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <TodoList\r\n                title={\"What to learn\"}\r\n                tasks={filteredTasks}\r\n                removeTask={removeTask}\r\n                filterTasks={filterTasks}\r\n                addTask={addTask}\r\n                inputValue={inputValue}\r\n                setinputValue={setinputValue}\r\n                addTODO={addTODO}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}