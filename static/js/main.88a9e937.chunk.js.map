{"version":3,"sources":["serviceWorker.ts","components/EditableSpan.tsx","components/TodoListInputFull.tsx","components/TodoList.tsx","components/ButtonAppBar.tsx","state/todoLists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","EditableSpan","props","useState","editMode","setEditMode","title","setTitle","TextField","id","variant","size","value","onChange","event","currentTarget","onBlur","onDoubleClick","TodoListInputFull","React","memo","callBack","inputValue","setInputValue","error","setError","console","log","addTitle","trim","label","onKeyPress","key","Button","style","maxWidth","maxHeight","minWidth","minHeight","color","onClick","TodoList","onClickFilterButtonHandler","filterValue","todoListID","filterTasks","addTODO","useCallback","task","todolistsID","editTodoListTitle","IconButton","removeTodoList","Delete","tasks","map","Checkbox","checked","isDone","changeTaskStatus","taskID","editTaskTitle","removeTask","filter","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","aria-label","mr","Typography","component","initialState","AppWithReducers","todolists","useSelector","state","todolist","dispatch","useDispatch","addTodoList","action","type","todoListId","v1","AddTodoListAC","AddTaskAC","todolistId","ChangeTaskStatusAC","filetValue","RemoveTaskAC","ChangeTaskTitleAC","todolistID","ChangeTodoListTitleAC","className","Container","fixed","Grid","container","padding","spacing","td","filteredTasks","item","Paper","rootReducer","combineReducers","newTodoList","copyState","store","createStore","ReactDOM","render","AppWithRedux","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.88a9e937.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import TextField from \"@mui/material/TextField/TextField\";\r\nimport React, { ChangeEvent, useState } from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string;\r\n    onChange: (title: string) => void;\r\n};\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    };\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    };\r\n    const onChangeTitleHandler = (event: ChangeEvent<HTMLInputElement>) =>\r\n        setTitle(event.currentTarget.value);\r\n\r\n    return editMode ? (\r\n        // <input\r\n        //     autoFocus\r\n        //     onChange={onChangeTitleHandler}\r\n        //     onBlur={activateViewMode}\r\n        //     value={title}\r\n        // />\r\n        <TextField\r\n            id=\"outlined-basic\"\r\n            variant=\"outlined\"\r\n            size={\"small\"}\r\n            value={title}\r\n            onChange={onChangeTitleHandler}\r\n            onBlur={activateViewMode}\r\n        />\r\n    ) : (\r\n        <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    );\r\n}\r\n","import { TextField } from \"@mui/material\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\n\r\ntype TodoListInputPropsType = {\r\n\tcallBack: (inputValue: string) => void;\r\n};\r\n\r\nexport const TodoListInputFull: React.FC<TodoListInputPropsType> = React.memo(\r\n\t({ callBack }) => {\r\n\t\tlet [inputValue, setInputValue] = useState(\"\");\r\n\t\tlet [error, setError] = useState<string | null>(null);\r\n\r\n\t\tconsole.log(\"Input\");\r\n\r\n\t\tconst addTitle = (inputValue: string) => {\r\n\t\t\tconst title = inputValue.trim();\r\n\t\t\tif (title !== \"\") {\r\n\t\t\t\tcallBack(title);\r\n\t\t\t\tsetInputValue(\"\");\r\n\t\t\t} else {\r\n\t\t\t\tsetError(\"Title is required!\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst onKeyPressInputHandler = (\r\n\t\t\tevent: KeyboardEvent<HTMLInputElement>\r\n\t\t) => {\r\n\t\t\tif (event.key === \"Enter\") {\r\n\t\t\t\tsetInputValue(event.currentTarget.value);\r\n\t\t\t\taddTitle(inputValue);\r\n\t\t\t}\r\n\r\n\t\t\tif (error !== null) {\r\n\t\t\t\tsetError(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\t\tsetInputValue(event.currentTarget.value);\r\n\t\t};\r\n\t\tconst onClickButtonHandler = () => {\r\n\t\t\taddTitle(inputValue);\r\n\t\t\tsetInputValue(\"\");\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{/* <input\r\n                className={error ? \"error\" : \"\"}\r\n                value={inputValue}\r\n                onChange={onChangeInputHandler}\r\n                onKeyPress={onKeyPressInputHandler}\r\n            /> */}\r\n\t\t\t\t{/* <button onClick={onClickButtonHandler}>+</button> */}\r\n\t\t\t\t<TextField\r\n\t\t\t\t\terror={!!error}\r\n\t\t\t\t\tid=\"outlined-basic\"\r\n\t\t\t\t\tlabel={!!error ? \"Title is required!\" : \"Add task\"}\r\n\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\tsize={\"small\"}\r\n\t\t\t\t\tvalue={inputValue}\r\n\t\t\t\t\tonChange={onChangeInputHandler}\r\n\t\t\t\t\tonKeyPress={onKeyPressInputHandler}\r\n\t\t\t\t/>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tmaxWidth: \"40px\",\r\n\t\t\t\t\t\tmaxHeight: \"40px\",\r\n\t\t\t\t\t\tminWidth: \"40px\",\r\n\t\t\t\t\t\tminHeight: \"40px\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\tonClick={onClickButtonHandler}\r\n\t\t\t\t>\r\n\t\t\t\t\t+\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n);\r\n","import { Delete } from \"@mui/icons-material\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport Checkbox from \"@mui/material/Checkbox/Checkbox\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport React, { ChangeEvent, useCallback } from \"react\";\r\nimport { FilterValueType } from \"../App\";\r\nimport { ButtonAppBar } from \"./ButtonAppBar\";\r\n// import { Button } from \"./Button\";\r\nimport { EditableSpan } from \"./EditableSpan\";\r\n// import { Input } from \"./Input\";\r\nimport { TodoListInputFull } from \"./TodoListInputFull\";\r\n\r\nexport type TodoListTaskType = {\r\n\tid: string;\r\n\ttitle: string;\r\n\tisDone: boolean;\r\n};\r\n\r\ntype TodoListPropsType = {\r\n\ttodoListID: string;\r\n\tfilter: FilterValueType;\r\n\ttitle: string;\r\n\ttasks: Array<TodoListTaskType>;\r\n\tremoveTask: (taskID: string, todolistsID: string) => void;\r\n\tfilterTasks: (filetValue: FilterValueType, todoListID: string) => void;\r\n\taddTODO: (title: string, todoListID: string) => void;\r\n\tchangeTaskStatus: (\r\n\t\ttaskID: string,\r\n\t\tisDone: boolean,\r\n\t\ttodolistsID: string\r\n\t) => void;\r\n\tremoveTodoList: (todoListID: string) => void;\r\n\teditTaskTitle: (todolistsID: string, taskID: string, title: string) => void;\r\n\teditTodoListTitle: (todolistsID: string, title: string) => void;\r\n};\r\n\r\nexport const TodoList = (props: TodoListPropsType) => {\r\n\tconst onClickFilterButtonHandler = (\r\n\t\tfilterValue: FilterValueType,\r\n\t\ttodoListID: string\r\n\t) => {\r\n\t\tprops.filterTasks(filterValue, todoListID);\r\n\t};\r\n\r\n\tconst onClickRemoveTaskHandler = (id: string, todolistsID: string) => {\r\n\t\tprops.removeTask(id, todolistsID);\r\n\t};\r\n\r\n\tconst onClickChangeTaskStatusHandler = (\r\n\t\tid: string,\r\n\t\tisDone: boolean,\r\n\t\ttodolistsID: string\r\n\t) => {\r\n\t\tprops.changeTaskStatus(id, isDone, todolistsID);\r\n\t};\r\n\r\n\tconst editTaskTitle = (\r\n\t\ttodolistsID: string,\r\n\t\ttaskID: string,\r\n\t\ttitle: string\r\n\t) => {\r\n\t\tprops.editTaskTitle(todolistsID, taskID, title);\r\n\t};\r\n\r\n\tconst editTodoListTitle = (todolistsID: string, title: string) => {\r\n\t\tprops.editTodoListTitle(todolistsID, title);\r\n\t};\r\n\r\n\tconst addTODO = useCallback((task: string) => {\r\n\t\tprops.addTODO(task, props.todoListID);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div>\r\n\t\t\t\t<EditableSpan\r\n\t\t\t\t\ttitle={props.title}\r\n\t\t\t\t\tonChange={(title) => {\r\n\t\t\t\t\t\teditTodoListTitle(props.todoListID, title);\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<IconButton\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tprops.removeTodoList(props.todoListID);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Delete />\r\n\t\t\t\t</IconButton>\r\n\t\t\t</div>\r\n\r\n\t\t\t<TodoListInputFull callBack={addTODO} />\r\n\t\t\t<ul>\r\n\t\t\t\t{props.tasks.map((task) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li key={task.id}>\r\n\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t// {...label}\r\n\t\t\t\t\t\t\t\tchecked={task.isDone}\r\n\t\t\t\t\t\t\t\tonChange={(\r\n\t\t\t\t\t\t\t\t\tevent: ChangeEvent<HTMLInputElement>\r\n\t\t\t\t\t\t\t\t) =>\r\n\t\t\t\t\t\t\t\t\tonClickChangeTaskStatusHandler(\r\n\t\t\t\t\t\t\t\t\t\ttask.id,\r\n\t\t\t\t\t\t\t\t\t\tevent.currentTarget.checked,\r\n\t\t\t\t\t\t\t\t\t\tprops.todoListID\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<EditableSpan\r\n\t\t\t\t\t\t\t\ttitle={task.title}\r\n\t\t\t\t\t\t\t\tonChange={(title) => {\r\n\t\t\t\t\t\t\t\t\teditTaskTitle(\r\n\t\t\t\t\t\t\t\t\t\tprops.todoListID,\r\n\t\t\t\t\t\t\t\t\t\ttask.id,\r\n\t\t\t\t\t\t\t\t\t\ttitle\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tonClickRemoveTaskHandler(\r\n\t\t\t\t\t\t\t\t\t\ttask.id,\r\n\t\t\t\t\t\t\t\t\t\tprops.todoListID\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Delete />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</ul>\r\n\t\t\t<div>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant={props.filter === \"All\" ? \"contained\" : \"outlined\"}\r\n\t\t\t\t\tcolor={\"secondary\"}\r\n\t\t\t\t\tsize={\"small\"}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tonClickFilterButtonHandler(\"All\", props.todoListID);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tAll\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant={\r\n\t\t\t\t\t\tprops.filter === \"Active\" ? \"contained\" : \"outlined\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolor={\"success\"}\r\n\t\t\t\t\tsize={\"small\"}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tonClickFilterButtonHandler(\"Active\", props.todoListID);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tActive\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant={\r\n\t\t\t\t\t\tprops.filter === \"Completed\" ? \"contained\" : \"outlined\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolor={\"error\"}\r\n\t\t\t\t\tsize={\"small\"}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tonClickFilterButtonHandler(\r\n\t\t\t\t\t\t\t\"Completed\",\r\n\t\t\t\t\t\t\tprops.todoListID\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tCompleted\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import * as React from \"react\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\n\r\nexport const ButtonAppBar = () => {\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography\r\n                        variant=\"h6\"\r\n                        component=\"div\"\r\n                        sx={{ flexGrow: 1 }}\r\n                    >\r\n                        Todo\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n};\r\n","import { TodoListsType, FilterValueType } from \"../App\";\r\nimport { v1 } from \"uuid\";\r\n\r\ntype ActionsType =\r\n\t| RemoveTodoListActionType\r\n\t| AddTodoListActionType\r\n\t| ChangeTodolistTitleActionType\r\n\t| ChangeTodolistFilterActionType;\r\n\r\nconst REMOVE_TODOLIST = \"REMOVE_TODOLIST\";\r\nconst ADD_TODOLIST = \"ADD_TODOLIST\";\r\nconst CHANGE_TODOLIST_TITLE = \"CHANGE_TODOLIST_TITLE\";\r\nconst CHANGE_TODOLIST_FILTER = \"CHANGE_TODOLIST_FILTER\";\r\n\r\nexport type RemoveTodoListActionType = {\r\n\ttype: typeof REMOVE_TODOLIST;\r\n\ttodolistId: string;\r\n};\r\n\r\nexport type AddTodoListActionType = {\r\n\ttype: typeof ADD_TODOLIST;\r\n\ttitle: string;\r\n\ttodoListId: string;\r\n};\r\n\r\nexport type ChangeTodolistTitleActionType = {\r\n\ttype: typeof CHANGE_TODOLIST_TITLE;\r\n\tid: string;\r\n\ttitle: string;\r\n};\r\n\r\nexport type ChangeTodolistFilterActionType = {\r\n\ttype: typeof CHANGE_TODOLIST_FILTER;\r\n\tid: string;\r\n\tfilter: FilterValueType;\r\n};\r\n\r\nconst initialState: Array<TodoListsType> = [];\r\n\r\nexport const todoListsReducer = (\r\n\tstate: Array<TodoListsType> = initialState,\r\n\taction: ActionsType\r\n): Array<TodoListsType> => {\r\n\tswitch (action.type) {\r\n\t\tcase REMOVE_TODOLIST: {\r\n\t\t\treturn state.filter((td) => td.id !== action.todolistId);\r\n\t\t}\r\n\r\n\t\tcase ADD_TODOLIST: {\r\n\t\t\tconst newTodoList: TodoListsType = {\r\n\t\t\t\tid: action.todoListId,\r\n\t\t\t\ttitle: action.title,\r\n\t\t\t\tfilter: \"All\",\r\n\t\t\t};\r\n\t\t\treturn [...state, newTodoList];\r\n\t\t}\r\n\r\n\t\tcase CHANGE_TODOLIST_TITLE: {\r\n\t\t\treturn state.map((td) =>\r\n\t\t\t\ttd.id === action.id ? { ...td, title: action.title } : td\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tcase CHANGE_TODOLIST_FILTER: {\r\n\t\t\treturn state.map((td) =>\r\n\t\t\t\ttd.id === action.id ? { ...td, filter: action.filter } : td\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport const RemoveTodoListAC = (\r\n\ttodolistId: string\r\n): RemoveTodoListActionType => {\r\n\treturn { type: REMOVE_TODOLIST, todolistId };\r\n};\r\n\r\nexport const AddTodoListAC = (title: string): AddTodoListActionType => {\r\n\treturn { type: ADD_TODOLIST, title, todoListId: v1() };\r\n};\r\n\r\nexport const ChangeTodoListTitleAC = (\r\n\ttodolistID: string,\r\n\ttitle: string\r\n): ChangeTodolistTitleActionType => {\r\n\treturn { type: CHANGE_TODOLIST_TITLE, id: todolistID, title };\r\n};\r\n\r\nexport const ChangeTodoListFilterAC = (\r\n\ttodolistID: string,\r\n\tfilter: FilterValueType\r\n): ChangeTodolistFilterActionType => {\r\n\treturn { type: CHANGE_TODOLIST_FILTER, id: todolistID, filter };\r\n};\r\n","import { TasksType } from \"../App\";\r\nimport { v1 } from \"uuid\";\r\nimport {\r\n    AddTodoListActionType,\r\n    RemoveTodoListActionType,\r\n} from \"./todoLists-reducer\";\r\n\r\nconst ADD_TASK = \"ADD_TASK\";\r\nconst REMOVE_TASK = \"REMOVE_TASK\";\r\nconst CHANGE_TASK_TITLE = \"CHANGE_TASK_TITLE\";\r\nconst CHANGE_TASK_STATUS = \"CHANGE_TASK_STATUS\";\r\nconst REMOVE_TODOLIST = \"REMOVE_TODOLIST\";\r\nconst ADD_TODOLIST = \"ADD_TODOLIST\";\r\n\r\ntype ActionsType =\r\n    | AddTaskActionType\r\n    | RemoveTaskActionType\r\n    | ChangeTaskTitleActionType\r\n    | ChangeTaskStatusActionType\r\n    | RemoveTodoListActionType\r\n    | AddTodoListActionType;\r\n\r\nexport type AddTaskActionType = {\r\n    type: typeof ADD_TASK;\r\n    todoListId: string;\r\n    title: string;\r\n};\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: typeof REMOVE_TASK;\r\n    todoListId: string;\r\n    taskID: string;\r\n};\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: typeof CHANGE_TASK_TITLE;\r\n    todoListId: string;\r\n    taskID: string;\r\n    title: string;\r\n};\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: typeof CHANGE_TASK_STATUS;\r\n    todoListId: string;\r\n    taskID: string;\r\n    isDone: boolean;\r\n};\r\n\r\nconst initialState: TasksType = {}\r\n\r\nexport const TasksReducer = (\r\n    state: TasksType = initialState,\r\n    action: ActionsType\r\n): TasksType => {\r\n    switch (action.type) {\r\n        case ADD_TASK: {\r\n            const task = { id: v1(), title: action.title, isDone: false };\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: [task, ...state[action.todoListId]],\r\n            };\r\n        }\r\n        case REMOVE_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(\r\n                    (task) => task.id !== action.taskID\r\n                ),\r\n            };\r\n        }\r\n        case CHANGE_TASK_TITLE: {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map((task) =>\r\n                    task.id === action.taskID\r\n                        ? { ...task, title: action.title }\r\n                        : task\r\n                ),\r\n            };\r\n        }\r\n        case CHANGE_TASK_STATUS: {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map((task) =>\r\n                    task.id === action.taskID\r\n                        ? { ...task, isDone: action.isDone }\r\n                        : task\r\n                ),\r\n            };\r\n        }\r\n        case REMOVE_TODOLIST: {\r\n            let copyState = { ...state };\r\n            delete copyState[action.todolistId];\r\n            return copyState;\r\n        }\r\n        case ADD_TODOLIST: {\r\n            return { ...state, [action.todoListId]: [] };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const AddTaskAC = (\r\n    todoListId: string,\r\n    title: string\r\n): AddTaskActionType => {\r\n    return { type: ADD_TASK, todoListId, title };\r\n};\r\n\r\nexport const RemoveTaskAC = (\r\n    todoListId: string,\r\n    taskID: string\r\n): RemoveTaskActionType => {\r\n    return { type: REMOVE_TASK, todoListId, taskID };\r\n};\r\n\r\nexport const ChangeTaskTitleAC = (\r\n    todoListId: string,\r\n    taskID: string,\r\n    title: string\r\n): ChangeTaskTitleActionType => {\r\n    return { type: CHANGE_TASK_TITLE, todoListId, taskID, title };\r\n};\r\n\r\nexport const ChangeTaskStatusAC = (\r\n    todoListId: string,\r\n    taskID: string,\r\n    isDone: boolean\r\n): ChangeTaskStatusActionType => {\r\n    return { type: CHANGE_TASK_STATUS, todoListId, taskID, isDone };\r\n};\r\n","import React, { useReducer, useCallback } from \"react\";\r\nimport \"./App.css\";\r\nimport { TodoList, TodoListTaskType } from \"./components/TodoList\";\r\nimport { v1 } from \"uuid\";\r\nimport { TodoListInputFull } from \"./components/TodoListInputFull\";\r\nimport { ButtonAppBar } from \"./components/ButtonAppBar\";\r\nimport { Container } from \"@mui/system\";\r\nimport Grid from \"@mui/material/Grid/Grid\";\r\nimport Paper from \"@mui/material/Paper/Paper\";\r\nimport {\r\n\tRemoveTodoListAC,\r\n\ttodoListsReducer,\r\n\tAddTodoListAC,\r\n\tChangeTodoListFilterAC,\r\n\tChangeTodoListTitleAC,\r\n} from \"./state/todoLists-reducer\";\r\nimport {\r\n\tAddTaskAC,\r\n\tChangeTaskStatusAC,\r\n\tChangeTaskTitleAC,\r\n\tRemoveTaskAC,\r\n\tTasksReducer,\r\n} from \"./state/tasks-reducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"./state/store\";\r\n\r\nexport type FilterValueType = \"All\" | \"Active\" | \"Completed\";\r\n\r\nexport type TodoListsType = {\r\n\tid: string;\r\n\ttitle: string;\r\n\tfilter: FilterValueType;\r\n};\r\n\r\nexport type TasksType = {\r\n\t[key: string]: Array<TodoListTaskType>;\r\n};\r\n\r\nfunction AppWithReducers() {\r\n\tconst todolists = useSelector<AppRootStateType, Array<TodoListsType>>(\r\n\t\t(state) => state.todolist\r\n\t);\r\n\tconst tasks = useSelector<AppRootStateType, TasksType>(\r\n\t\t(state) => state.tasks\r\n\t);\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// function addTodoList(title: string) {\r\n\t// \tconst action = AddTodoListAC(title);\r\n\t// \tdispatch(action);\r\n\t// }\r\n\r\n\t// const addTODO = (title: string, todoListID: string) => {\r\n\t// \tconst action = AddTaskAC(todoListID, title);\r\n\t// \tdispatch(action);\r\n\t// };\r\n\r\n\tconst addTodoList = useCallback((title: string) => {\r\n\t\tconst action = AddTodoListAC(title);\r\n\t\tdispatch(action);\r\n\t}, []);\r\n\r\n\tconst addTODO = useCallback((title: string, todoListID: string) => {\r\n\t\tconst action = AddTaskAC(todoListID, title);\r\n\t\tdispatch(action);\r\n\t}, []);\r\n\r\n\tconst removeTodoList = (todoListID: string) => {\r\n\t\tconst action = RemoveTodoListAC(todoListID);\r\n\t\tdispatch(action);\r\n\t};\r\n\r\n\tconst changeTaskStatus = (\r\n\t\ttaskID: string,\r\n\t\tisDone: boolean,\r\n\t\ttodolistsID: string\r\n\t) => {\r\n\t\tconst action = ChangeTaskStatusAC(todolistsID, taskID, isDone);\r\n\t\tdispatch(action);\r\n\t};\r\n\r\n\tfunction filterTasks(filetValue: FilterValueType, todolistsID: string) {\r\n\t\tconst action = ChangeTodoListFilterAC(todolistsID, filetValue);\r\n\t\tdispatch(action);\r\n\t}\r\n\r\n\tfunction removeTask(taskID: string, todolistsID: string) {\r\n\t\tconst action = RemoveTaskAC(todolistsID, taskID);\r\n\t\tdispatch(action);\r\n\t}\r\n\r\n\tfunction editTaskTitle(todolistsID: string, taskID: string, title: string) {\r\n\t\tconst action = ChangeTaskTitleAC(todolistsID, taskID, title);\r\n\t\tdispatch(action);\r\n\t}\r\n\r\n\tfunction editTodoListTitle(todolistsID: string, title: string) {\r\n\t\tconst action = ChangeTodoListTitleAC(todolistsID, title);\r\n\t\tdispatch(action);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<ButtonAppBar />\r\n\t\t\t<Container fixed>\r\n\t\t\t\t<Grid container style={{ padding: \"10px\" }}>\r\n\t\t\t\t\t<TodoListInputFull callBack={addTodoList} />\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t{todolists.map((td) => {\r\n\t\t\t\t\t\tlet filteredTasks = tasks[td.id];\r\n\r\n\t\t\t\t\t\tif (td.filter === \"Active\") {\r\n\t\t\t\t\t\t\tfilteredTasks = filteredTasks.filter(\r\n\t\t\t\t\t\t\t\t(task) => !task.isDone\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (td.filter === \"Completed\") {\r\n\t\t\t\t\t\t\tfilteredTasks = filteredTasks.filter(\r\n\t\t\t\t\t\t\t\t(task) => task.isDone\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Grid key={td.id} item>\r\n\t\t\t\t\t\t\t\t<Paper style={{ padding: \"10px\" }}>\r\n\t\t\t\t\t\t\t\t\t<TodoList\r\n\t\t\t\t\t\t\t\t\t\t// key={td.id}\r\n\t\t\t\t\t\t\t\t\t\ttodoListID={td.id}\r\n\t\t\t\t\t\t\t\t\t\tfilter={td.filter}\r\n\t\t\t\t\t\t\t\t\t\ttitle={td.title}\r\n\t\t\t\t\t\t\t\t\t\ttasks={filteredTasks}\r\n\t\t\t\t\t\t\t\t\t\tremoveTask={removeTask}\r\n\t\t\t\t\t\t\t\t\t\tfilterTasks={filterTasks}\r\n\t\t\t\t\t\t\t\t\t\taddTODO={addTODO}\r\n\t\t\t\t\t\t\t\t\t\tchangeTaskStatus={changeTaskStatus}\r\n\t\t\t\t\t\t\t\t\t\tremoveTodoList={removeTodoList}\r\n\t\t\t\t\t\t\t\t\t\teditTaskTitle={editTaskTitle}\r\n\t\t\t\t\t\t\t\t\t\teditTodoListTitle={editTodoListTitle}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</Grid>\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default AppWithReducers;\r\n","import { combineReducers } from \"redux\";\r\nimport { legacy_createStore as createStore} from 'redux'\r\nimport {todoListsReducer} from \"./todoLists-reducer\";\r\nimport { TasksReducer } from \"./tasks-reducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n\ttodolist: todoListsReducer,\r\n\ttasks: TasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n// import App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n// import AppWithReducers from \"./AppWithReducers\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\nimport { store } from \"./state/store\"\r\nimport { Provider } from 'react-redux'\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<AppWithRedux />\r\n\t</Provider>,\r\ndocument.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}