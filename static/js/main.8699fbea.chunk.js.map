{"version":3,"sources":["components/EditableSpan.tsx","components/TodoListInputFull.tsx","components/TodoList.tsx","components/ButtonAppBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EditableSpan","props","useState","editMode","setEditMode","title","setTitle","TextField","id","variant","size","value","onChange","event","currentTarget","onBlur","onDoubleClick","TodoListInputFull","callBack","inputValue","setInputValue","error","setError","addTitle","trim","label","onKeyPress","key","Button","style","maxWidth","maxHeight","minWidth","minHeight","color","onClick","TodoList","onClickFilterButtonHandler","filterValue","todoListID","filterTasks","todolistsID","editTodoListTitle","IconButton","removeTodoList","Delete","task","addTODO","tasks","map","Checkbox","checked","isDone","changeTaskStatus","taskID","editTaskTitle","removeTask","filter","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","aria-label","mr","Typography","component","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","td","find","filetValue","todolist","tl","console","log","className","Container","fixed","Grid","container","padding","newTodoListID","spacing","filteredTasks","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8699fbea.chunk.js","sourcesContent":["import TextField from \"@mui/material/TextField/TextField\";\r\nimport React, { ChangeEvent, useState } from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string;\r\n    onChange: (title: string) => void;\r\n};\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    };\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    };\r\n    const onChangeTitleHandler = (event: ChangeEvent<HTMLInputElement>) =>\r\n        setTitle(event.currentTarget.value);\r\n\r\n    return editMode ? (\r\n        // <input\r\n        //     autoFocus\r\n        //     onChange={onChangeTitleHandler}\r\n        //     onBlur={activateViewMode}\r\n        //     value={title}\r\n        // />\r\n        <TextField\r\n            id=\"outlined-basic\"\r\n            variant=\"outlined\"\r\n            size={\"small\"}\r\n            value={title}\r\n            onChange={onChangeTitleHandler}\r\n            onBlur={activateViewMode}\r\n        />\r\n    ) : (\r\n        <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    );\r\n}\r\n","import { TextField } from \"@mui/material\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\n\r\ntype TodoListInputPropsType = {\r\n    callBack: (inputValue: string) => void;\r\n};\r\n\r\nexport const TodoListInputFull: React.FC<TodoListInputPropsType> = ({\r\n    callBack,\r\n}) => {\r\n    let [inputValue, setInputValue] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const addTitle = (inputValue: string) => {\r\n        const title = inputValue.trim();\r\n        if (title !== \"\") {\r\n            callBack(title);\r\n            setInputValue(\"\");\r\n        } else {\r\n            setError(\"Title is required!\");\r\n        }\r\n    };\r\n\r\n    const onKeyPressInputHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (event.key === \"Enter\") {\r\n            setInputValue(event.currentTarget.value);\r\n            addTitle(inputValue);\r\n        }\r\n    };\r\n\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(event.currentTarget.value);\r\n    };\r\n    const onClickButtonHandler = () => {\r\n        addTitle(inputValue);\r\n        setInputValue(\"\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* <input\r\n                className={error ? \"error\" : \"\"}\r\n                value={inputValue}\r\n                onChange={onChangeInputHandler}\r\n                onKeyPress={onKeyPressInputHandler}\r\n            /> */}\r\n            {/* <button onClick={onClickButtonHandler}>+</button> */}\r\n            <TextField\r\n                error={!!error}\r\n                id=\"outlined-basic\"\r\n                label={!!error ? \"Title is required!\" : \"Add task\"}\r\n                variant=\"outlined\"\r\n                size={\"small\"}\r\n                value={inputValue}\r\n                onChange={onChangeInputHandler}\r\n                onKeyPress={onKeyPressInputHandler}\r\n            />\r\n            <Button\r\n                style={{\r\n                    maxWidth: \"40px\",\r\n                    maxHeight: \"40px\",\r\n                    minWidth: \"40px\",\r\n                    minHeight: \"40px\",\r\n                }}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={onClickButtonHandler}\r\n            >\r\n                +\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import { Delete } from \"@mui/icons-material\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport Checkbox from \"@mui/material/Checkbox/Checkbox\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport React, { ChangeEvent } from \"react\";\r\nimport { FilterValueType } from \"../App\";\r\nimport { ButtonAppBar } from \"./ButtonAppBar\";\r\n// import { Button } from \"./Button\";\r\nimport { EditableSpan } from \"./EditableSpan\";\r\n// import { Input } from \"./Input\";\r\nimport { TodoListInputFull } from \"./TodoListInputFull\";\r\n\r\nexport type TodoListTaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n};\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string;\r\n    filter: FilterValueType;\r\n    title: string;\r\n    tasks: Array<TodoListTaskType>;\r\n    removeTask: (taskID: string, todolistsID: string) => void;\r\n    filterTasks: (filetValue: FilterValueType, todoListID: string) => void;\r\n    addTODO: (title: string, todoListID: string) => void;\r\n    changeTaskStatus: (\r\n        taskID: string,\r\n        isDone: boolean,\r\n        todolistsID: string\r\n    ) => void;\r\n    removeTodoList: (todoListID: string) => void;\r\n    editTaskTitle: (todolistsID: string, taskID: string, title: string) => void;\r\n    editTodoListTitle: (todolistsID: string, title: string) => void;\r\n};\r\n\r\nexport const TodoList = (props: TodoListPropsType) => {\r\n    const onClickFilterButtonHandler = (\r\n        filterValue: FilterValueType,\r\n        todoListID: string\r\n    ) => {\r\n        props.filterTasks(filterValue, todoListID);\r\n    };\r\n\r\n    const onClickRemoveTaskHandler = (id: string, todolistsID: string) => {\r\n        props.removeTask(id, todolistsID);\r\n    };\r\n\r\n    const onClickChangeTaskStatusHandler = (\r\n        id: string,\r\n        isDone: boolean,\r\n        todolistsID: string\r\n    ) => {\r\n        props.changeTaskStatus(id, isDone, todolistsID);\r\n    };\r\n\r\n    const editTaskTitle = (\r\n        todolistsID: string,\r\n        taskID: string,\r\n        title: string\r\n    ) => {\r\n        props.editTaskTitle(todolistsID, taskID, title);\r\n    };\r\n\r\n    const editTodoListTitle = (todolistsID: string, title: string) => {\r\n        props.editTodoListTitle(todolistsID, title);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {/* <h3>{props.title}</h3> */}\r\n                <EditableSpan\r\n                    title={props.title}\r\n                    onChange={(title) => {\r\n                        editTodoListTitle(props.todoListID, title);\r\n                    }}\r\n                />\r\n                <IconButton\r\n                    onClick={() => {\r\n                        props.removeTodoList(props.todoListID);\r\n                    }}\r\n                >\r\n                    <Delete />\r\n                </IconButton>\r\n            </div>\r\n\r\n            <TodoListInputFull\r\n                callBack={(task: string) =>\r\n                    props.addTODO(task, props.todoListID)\r\n                }\r\n            />\r\n            {/* <Input\r\n                className={error ? \"error\" : \"\"}\r\n                inputValue={inputValue}\r\n                setInputValue={setInputValue}\r\n                addTODO={addTODO}\r\n                setError={setError}\r\n                todoListID={props.todoListID}\r\n            /> */}\r\n            {/* <Button name={\"+\"} callBack={addTODO} /> */}\r\n            <ul>\r\n                {props.tasks.map((task) => {\r\n                    return (\r\n                        <li key={task.id}>\r\n                            {/* <input\r\n                                    type=\"checkbox\"\r\n                                    checked={task.isDone}\r\n                                    onChange={(\r\n                                        event: ChangeEvent<HTMLInputElement>\r\n                                    ) =>\r\n                                        onClickChangeTaskStatusHandler(\r\n                                            task.id,\r\n                                            event.currentTarget.checked,\r\n                                            props.todoListID\r\n                                        )\r\n                                    }\r\n                                /> */}\r\n                            <Checkbox\r\n                                // {...label}\r\n                                checked={task.isDone}\r\n                                onChange={(\r\n                                    event: ChangeEvent<HTMLInputElement>\r\n                                ) =>\r\n                                    onClickChangeTaskStatusHandler(\r\n                                        task.id,\r\n                                        event.currentTarget.checked,\r\n                                        props.todoListID\r\n                                    )\r\n                                }\r\n                            />\r\n                            {/* <span className={task.isDone ? \"isDone\" : \"\"}>\r\n                                    {task.title}****\r\n                                </span> */}\r\n                            <EditableSpan\r\n                                title={task.title}\r\n                                onChange={(title) => {\r\n                                    editTaskTitle(\r\n                                        props.todoListID,\r\n                                        task.id,\r\n                                        title\r\n                                    );\r\n                                }}\r\n                            />\r\n\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    onClickRemoveTaskHandler(\r\n                                        task.id,\r\n                                        props.todoListID\r\n                                    );\r\n                                }}\r\n                            >\r\n                                <Delete />\r\n                            </IconButton>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={props.filter === \"All\" ? \"contained\" : \"outlined\"}\r\n                    color={\"secondary\"}\r\n                    size={\"small\"}\r\n                    onClick={() => {\r\n                        onClickFilterButtonHandler(\"All\", props.todoListID);\r\n                    }}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    variant={\r\n                        props.filter === \"Active\" ? \"contained\" : \"outlined\"\r\n                    }\r\n                    color={\"success\"}\r\n                    size={\"small\"}\r\n                    onClick={() => {\r\n                        onClickFilterButtonHandler(\"Active\", props.todoListID);\r\n                    }}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    variant={\r\n                        props.filter === \"Completed\" ? \"contained\" : \"outlined\"\r\n                    }\r\n                    color={\"error\"}\r\n                    size={\"small\"}\r\n                    onClick={() => {\r\n                        onClickFilterButtonHandler(\r\n                            \"Completed\",\r\n                            props.todoListID\r\n                        );\r\n                    }}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\n\r\nexport const ButtonAppBar = () => {\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography\r\n                        variant=\"h6\"\r\n                        component=\"div\"\r\n                        sx={{ flexGrow: 1 }}\r\n                    >\r\n                        Todo\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { TodoList, TodoListTaskType } from \"./components/TodoList\";\r\nimport { v1 } from \"uuid\";\r\nimport { TodoListInputFull } from \"./components/TodoListInputFull\";\r\nimport { ButtonAppBar } from \"./components/ButtonAppBar\";\r\nimport { Container } from \"@mui/system\";\r\nimport Grid from \"@mui/material/Grid/Grid\";\r\nimport Paper from \"@mui/material/Paper/Paper\";\r\n\r\nexport type FilterValueType = \"All\" | \"Active\" | \"Completed\";\r\n\r\ntype TodoListsType = {\r\n    id: string;\r\n    title: string;\r\n    filter: FilterValueType;\r\n};\r\n\r\ntype TasksType = {\r\n    [key: string]: Array<TodoListTaskType>;\r\n};\r\n\r\nfunction App() {\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodoListsType>>([\r\n        { id: todolistID1, title: \"What to learn\", filter: \"All\" },\r\n        { id: todolistID2, title: \"What to buy\", filter: \"All\" },\r\n    ]);\r\n\r\n    let [tasks, setTasks] = useState<TasksType>({\r\n        [todolistID1]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true },\r\n            { id: v1(), title: \"ReactJS\", isDone: false },\r\n            { id: v1(), title: \"Rest API\", isDone: false },\r\n            { id: v1(), title: \"GraphQL\", isDone: false },\r\n        ],\r\n        [todolistID2]: [\r\n            { id: v1(), title: \"Milk\", isDone: true },\r\n            { id: v1(), title: \"Eggs\", isDone: true },\r\n            { id: v1(), title: \"Meat\", isDone: false },\r\n            { id: v1(), title: \"Pizza\", isDone: false },\r\n            { id: v1(), title: \"Vine\", isDone: false },\r\n        ],\r\n    });\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1();\r\n        const newTodoList: TodoListsType = {\r\n            id: newTodoListID,\r\n            title: title,\r\n            filter: \"All\",\r\n        };\r\n        setTodolists([newTodoList, ...todolists]);\r\n        setTasks({ ...tasks, [newTodoListID]: [] });\r\n    }\r\n\r\n    const removeTodoList = (todoListID: string) => {\r\n        setTodolists(todolists.filter((td) => td.id !== todoListID));\r\n        delete tasks[todoListID];\r\n        setTasks({ ...tasks });\r\n    };\r\n\r\n    const addTODO = (title: string, todoListID: string) => {\r\n        const task = { id: v1(), title: title, isDone: false };\r\n        // const todolistTasks = tasks[todoListID];\r\n        // const newTasks = [task, ...todolistTasks];\r\n        // tasks[todoListID] = newTasks;\r\n        setTasks({ ...tasks, [todoListID]: [task, ...tasks[todoListID]] });\r\n    };\r\n\r\n    const changeTaskStatus = (\r\n        taskID: string,\r\n        isDone: boolean,\r\n        todolistsID: string\r\n    ) => {\r\n        let todoListTasks = tasks[todolistsID];\r\n        let task = todoListTasks.find((task) => task.id === taskID);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({ ...tasks });\r\n        }\r\n    };\r\n\r\n    function filterTasks(filetValue: FilterValueType, todolistsID: string) {\r\n        let todolist = todolists.find((tl) => tl.id === todolistsID);\r\n        if (todolist) {\r\n            todolist.filter = filetValue;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    function removeTask(taskID: string, todolistsID: string) {\r\n        // tasks = tasks.filter((task) => task.id !== taskID);\r\n        // setTasks(tasks);\r\n        setTasks({\r\n            ...tasks,\r\n            [todolistsID]: tasks[todolistsID].filter(\r\n                (task) => task.id !== taskID\r\n            ),\r\n        });\r\n    }\r\n\r\n    function editTaskTitle(todolistsID: string, taskID: string, title: string) {\r\n        console.log(tasks[todolistsID]);\r\n        setTasks({\r\n            ...tasks,\r\n            [todolistsID]: tasks[todolistsID].map((task) =>\r\n                task.id === taskID ? { ...task, title: title } : task\r\n            ),\r\n        });\r\n    }\r\n\r\n    function editTodoListTitle(todolistsID: string, title: string) {\r\n        setTodolists(\r\n            todolists.map((td) =>\r\n                td.id === todolistsID ? { ...td, title: title } : td\r\n            )\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar />\r\n            <Container fixed>\r\n                <Grid container style={{ padding: \"10px\" }}>\r\n                    <TodoListInputFull callBack={addTodoList} />\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map((td) => {\r\n                        let filteredTasks = tasks[td.id];\r\n\r\n                        if (td.filter === \"Active\") {\r\n                            filteredTasks = filteredTasks.filter(\r\n                                (task) => !task.isDone\r\n                            );\r\n                        }\r\n                        if (td.filter === \"Completed\") {\r\n                            filteredTasks = filteredTasks.filter(\r\n                                (task) => task.isDone\r\n                            );\r\n                        }\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper style={{ padding: \"10px\" }}>\r\n                                    <TodoList\r\n                                        key={td.id}\r\n                                        todoListID={td.id}\r\n                                        filter={td.filter}\r\n                                        title={td.title}\r\n                                        tasks={filteredTasks}\r\n                                        removeTask={removeTask}\r\n                                        filterTasks={filterTasks}\r\n                                        addTODO={addTODO}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        removeTodoList={removeTodoList}\r\n                                        editTaskTitle={editTaskTitle}\r\n                                        editTodoListTitle={editTodoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}