{"version":3,"sources":["serviceWorker.ts","components/EditableSpan.tsx","components/Task.tsx","components/TodoListInputFull.tsx","components/TodoList.tsx","components/ButtonAppBar.tsx","state/todoLists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","EditableSpan","React","memo","props","console","log","useState","editMode","setEditMode","title","setTitle","TextField","id","variant","size","value","onChange","event","currentTarget","onBlur","onDoubleClick","Task","editTaskTitle","useCallback","todolistsID","taskID","todoListID","Checkbox","checked","isDone","changeTaskStatus","IconButton","onClick","removeTask","Delete","TodoListInputFull","callBack","inputValue","setInputValue","error","setError","addTitle","trim","label","onKeyPress","key","Button","style","maxWidth","maxHeight","minWidth","minHeight","color","TodoList","onClickFilterButtonHandler","filterValue","filterTasks","editTodoListTitle","addTODO","task","taskForTodoList","tasks","filter","removeTodoList","map","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","aria-label","mr","Typography","component","initialState","AppWithReducers","todolists","useSelector","state","todolist","dispatch","useDispatch","addTodoList","action","type","todoListId","v1","AddTodoListAC","AddTaskAC","todolistId","ChangeTaskStatusAC","filetValue","RemoveTaskAC","ChangeTaskTitleAC","todolistID","ChangeTodoListTitleAC","className","Container","fixed","Grid","container","padding","spacing","td","filteredTasks","item","Paper","rootReducer","combineReducers","newTodoList","copyState","store","createStore","ReactDOM","render","AppWithRedux","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7d0c26a2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import TextField from \"@mui/material/TextField/TextField\";\r\nimport React, { ChangeEvent, useState } from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n\ttitle: string;\r\n\tonChange: (title: string) => void;\r\n};\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\tconsole.log(\"EditableSpan called\");\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\tlet [title, setTitle] = useState(\"\");\r\n\r\n\tconst activateEditMode = () => {\r\n\t\tsetEditMode(true);\r\n\t\tsetTitle(props.title);\r\n\t};\r\n\tconst activateViewMode = () => {\r\n\t\tsetEditMode(false);\r\n\t\tprops.onChange(title);\r\n\t};\r\n\tconst onChangeTitleHandler = (event: ChangeEvent<HTMLInputElement>) =>\r\n\t\tsetTitle(event.currentTarget.value);\r\n\r\n\treturn editMode ? (\r\n\t\t<TextField\r\n\t\t\tid=\"outlined-basic\"\r\n\t\t\tvariant=\"outlined\"\r\n\t\t\tsize={\"small\"}\r\n\t\t\tvalue={title}\r\n\t\t\tonChange={onChangeTitleHandler}\r\n\t\t\tonBlur={activateViewMode}\r\n\t\t/>\r\n\t) : (\r\n\t\t<span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\t);\r\n});\r\n","import { Delete } from \"@mui/icons-material\";\r\nimport { Checkbox, IconButton } from \"@mui/material\";\r\nimport React, { ChangeEvent, useCallback } from \"react\";\r\nimport { EditableSpan } from \"./EditableSpan\";\r\n\r\nexport const Task = React.memo((props: any) => {\r\n\tconst onClickRemoveTaskHandler = (id: string, todolistsID: string) => {\r\n\t\tprops.removeTask(id, todolistsID);\r\n\t};\r\n\r\n\tconst onClickChangeTaskStatusHandler = (\r\n\t\tid: string,\r\n\t\tisDone: boolean,\r\n\t\ttodolistsID: string\r\n\t) => {\r\n\t\tprops.changeTaskStatus(id, isDone, todolistsID);\r\n\t};\r\n\r\n\tconst editTaskTitle = useCallback(\r\n\t\t(todolistsID: string, taskID: string, title: string) => {\r\n\t\t\tprops.editTaskTitle(todolistsID, taskID, title);\r\n\t\t},\r\n\t\t[props.editTaskTitle, props.todoListID, props.taskID]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t<Checkbox\r\n\t\t\t\tchecked={props.isDone}\r\n\t\t\t\tonChange={(event: ChangeEvent<HTMLInputElement>) =>\r\n\t\t\t\t\tonClickChangeTaskStatusHandler(\r\n\t\t\t\t\t\tprops.taskID,\r\n\t\t\t\t\t\tevent.currentTarget.checked,\r\n\t\t\t\t\t\tprops.todoListID\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\t\t\t<EditableSpan\r\n\t\t\t\ttitle={props.title}\r\n\t\t\t\tonChange={(title) => {\r\n\t\t\t\t\teditTaskTitle(props.todoListID, props.taskID, title);\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\r\n\t\t\t<IconButton\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tonClickRemoveTaskHandler(props.taskID, props.todoListID);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Delete />\r\n\t\t\t</IconButton>\r\n\t\t</li>\r\n\t);\r\n});\r\n","import { TextField } from \"@mui/material\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\n\r\ntype TodoListInputPropsType = {\r\n\tcallBack: (inputValue: string) => void;\r\n};\r\n\r\nexport const TodoListInputFull: React.FC<TodoListInputPropsType> = React.memo(\r\n\t({ callBack }) => {\r\n\t\tlet [inputValue, setInputValue] = useState(\"\");\r\n\t\tlet [error, setError] = useState<string | null>(null);\r\n\r\n\t\tconsole.log(\"Input called\");\r\n\r\n\t\tconst addTitle = (inputValue: string) => {\r\n\t\t\tconst title = inputValue.trim();\r\n\t\t\tif (title !== \"\") {\r\n\t\t\t\tcallBack(title);\r\n\t\t\t\tsetInputValue(\"\");\r\n\t\t\t} else {\r\n\t\t\t\tsetError(\"Title is required!\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst onKeyPressInputHandler = (\r\n\t\t\tevent: KeyboardEvent<HTMLInputElement>\r\n\t\t) => {\r\n\t\t\tif (event.key === \"Enter\") {\r\n\t\t\t\tsetInputValue(event.currentTarget.value);\r\n\t\t\t\taddTitle(inputValue);\r\n\t\t\t}\r\n\r\n\t\t\tif (error !== null) {\r\n\t\t\t\tsetError(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n\t\t\tsetInputValue(event.currentTarget.value);\r\n\t\t};\r\n\t\tconst onClickButtonHandler = () => {\r\n\t\t\taddTitle(inputValue);\r\n\t\t\tsetInputValue(\"\");\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{/* <input\r\n                className={error ? \"error\" : \"\"}\r\n                value={inputValue}\r\n                onChange={onChangeInputHandler}\r\n                onKeyPress={onKeyPressInputHandler}\r\n            /> */}\r\n\t\t\t\t{/* <button onClick={onClickButtonHandler}>+</button> */}\r\n\t\t\t\t<TextField\r\n\t\t\t\t\terror={!!error}\r\n\t\t\t\t\tid=\"outlined-basic\"\r\n\t\t\t\t\tlabel={!!error ? \"Title is required!\" : \"Add task\"}\r\n\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\tsize={\"small\"}\r\n\t\t\t\t\tvalue={inputValue}\r\n\t\t\t\t\tonChange={onChangeInputHandler}\r\n\t\t\t\t\tonKeyPress={onKeyPressInputHandler}\r\n\t\t\t\t/>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tmaxWidth: \"40px\",\r\n\t\t\t\t\t\tmaxHeight: \"40px\",\r\n\t\t\t\t\t\tminWidth: \"40px\",\r\n\t\t\t\t\t\tminHeight: \"40px\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\tonClick={onClickButtonHandler}\r\n\t\t\t\t>\r\n\t\t\t\t\t+\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n);\r\n","import { Delete } from \"@mui/icons-material\";\r\nimport Button from \"@mui/material/Button/Button\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport React, { useCallback } from \"react\";\r\nimport { FilterValueType } from \"../App\";\r\nimport { EditableSpan } from \"./EditableSpan\";\r\nimport { Task } from \"./Task\";\r\nimport { TodoListInputFull } from \"./TodoListInputFull\";\r\n\r\nexport type TodoListTaskType = {\r\n\tid: string;\r\n\ttitle: string;\r\n\tisDone: boolean;\r\n};\r\n\r\ntype TodoListPropsType = {\r\n\ttodoListID: string;\r\n\tfilter: FilterValueType;\r\n\ttitle: string;\r\n\ttasks: Array<TodoListTaskType>;\r\n\tremoveTask: (taskID: string, todolistsID: string) => void;\r\n\tfilterTasks: (filetValue: FilterValueType, todoListID: string) => void;\r\n\taddTODO: (title: string, todoListID: string) => void;\r\n\tchangeTaskStatus: (\r\n\t\ttaskID: string,\r\n\t\tisDone: boolean,\r\n\t\ttodolistsID: string\r\n\t) => void;\r\n\tremoveTodoList: (todoListID: string) => void;\r\n\teditTaskTitle: (todolistsID: string, taskID: string, title: string) => void;\r\n\teditTodoListTitle: (todolistsID: string, title: string) => void;\r\n};\r\n\r\nexport const TodoList = React.memo((props: TodoListPropsType) => {\r\n\tconsole.log(\"Todolist called\");\r\n\r\n\tconst onClickFilterButtonHandler = useCallback(\r\n\t\t(filterValue: FilterValueType, todoListID: string) => {\r\n\t\t\tprops.filterTasks(filterValue, todoListID);\r\n\t\t},\r\n\t\t[props.filterTasks, props.todoListID]\r\n\t);\r\n\r\n\t// const onClickRemoveTaskHandler = (id: string, todolistsID: string) => {\r\n\t// \tprops.removeTask(id, todolistsID);\r\n\t// };\r\n\r\n\t// const onClickChangeTaskStatusHandler = (\r\n\t// \tid: string,\r\n\t// \tisDone: boolean,\r\n\t// \ttodolistsID: string\r\n\t// ) => {\r\n\t// \tprops.changeTaskStatus(id, isDone, todolistsID);\r\n\t// };\r\n\r\n\t// const editTaskTitle = (\r\n\t// \ttodolistsID: string,\r\n\t// \ttaskID: string,\r\n\t// \ttitle: string\r\n\t// ) => {\r\n\t// \tprops.editTaskTitle(todolistsID, taskID, title);\r\n\t// };\r\n\r\n\tconst editTodoListTitle = useCallback(\r\n\t\t(todolistsID: string, title: string) => {\r\n\t\t\tprops.editTodoListTitle(todolistsID, title);\r\n\t\t},\r\n\t\t[props.editTodoListTitle, props.todoListID]\r\n\t);\r\n\r\n\t// const editTodoListTitle = (todolistsID: string, title: string) => {\r\n\t// \tprops.editTodoListTitle(todolistsID, title);\r\n\t// };\r\n\r\n\tconst addTODO = useCallback(\r\n\t\t(task: string) => {\r\n\t\t\tprops.addTODO(task, props.todoListID);\r\n\t\t},\r\n\t\t[props.todoListID, props.addTODO]\r\n\t);\r\n\r\n\tlet taskForTodoList = props.tasks;\r\n\r\n\tif (props.filter === \"Active\") {\r\n\t\ttaskForTodoList = taskForTodoList.filter((task) => !task.isDone);\r\n\t}\r\n\tif (props.filter === \"Completed\") {\r\n\t\ttaskForTodoList = taskForTodoList.filter((task) => task.isDone);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div>\r\n\t\t\t\t<EditableSpan\r\n\t\t\t\t\ttitle={props.title}\r\n\t\t\t\t\tonChange={(title) => {\r\n\t\t\t\t\t\teditTodoListTitle(props.todoListID, title);\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<IconButton\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tprops.removeTodoList(props.todoListID);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Delete />\r\n\t\t\t\t</IconButton>\r\n\t\t\t</div>\r\n\r\n\t\t\t<TodoListInputFull callBack={addTODO} />\r\n\t\t\t<ul>\r\n\t\t\t\t{taskForTodoList.map((task) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Task\r\n\t\t\t\t\t\t\tkey={task.id}\r\n\t\t\t\t\t\t\ttitle={task.title}\r\n\t\t\t\t\t\t\ttaskID={task.id}\r\n\t\t\t\t\t\t\ttodoListID={props.todoListID}\r\n\t\t\t\t\t\t\teditTaskTitle={props.editTaskTitle}\r\n\t\t\t\t\t\t\tchangeTaskStatus={props.changeTaskStatus}\r\n\t\t\t\t\t\t\tremoveTask={props.removeTask}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t// <li key={task.id}>\r\n\t\t\t\t\t\t// \t<Checkbox\r\n\t\t\t\t\t\t// \t\t// {...label}\r\n\t\t\t\t\t\t// \t\tchecked={task.isDone}\r\n\t\t\t\t\t\t// \t\tonChange={(\r\n\t\t\t\t\t\t// \t\t\tevent: ChangeEvent<HTMLInputElement>\r\n\t\t\t\t\t\t// \t\t) =>\r\n\t\t\t\t\t\t// \t\t\tonClickChangeTaskStatusHandler(\r\n\t\t\t\t\t\t// \t\t\t\ttask.id,\r\n\t\t\t\t\t\t// \t\t\t\tevent.currentTarget.checked,\r\n\t\t\t\t\t\t// \t\t\t\tprops.todoListID\r\n\t\t\t\t\t\t// \t\t\t)\r\n\t\t\t\t\t\t// \t\t}\r\n\t\t\t\t\t\t// \t/>\r\n\t\t\t\t\t\t// \t<EditableSpan\r\n\t\t\t\t\t\t// \t\ttitle={task.title}\r\n\t\t\t\t\t\t// \t\tonChange={(title) => {\r\n\t\t\t\t\t\t// \t\t\teditTaskTitle(\r\n\t\t\t\t\t\t// \t\t\t\tprops.todoListID,\r\n\t\t\t\t\t\t// \t\t\t\ttask.id,\r\n\t\t\t\t\t\t// \t\t\t\ttitle\r\n\t\t\t\t\t\t// \t\t\t);\r\n\t\t\t\t\t\t// \t\t}}\r\n\t\t\t\t\t\t// \t/>\r\n\r\n\t\t\t\t\t\t// \t<IconButton\r\n\t\t\t\t\t\t// \t\tonClick={() => {\r\n\t\t\t\t\t\t// \t\t\tonClickRemoveTaskHandler(\r\n\t\t\t\t\t\t// \t\t\t\ttask.id,\r\n\t\t\t\t\t\t// \t\t\t\tprops.todoListID\r\n\t\t\t\t\t\t// \t\t\t);\r\n\t\t\t\t\t\t// \t\t}}\r\n\t\t\t\t\t\t// \t>\r\n\t\t\t\t\t\t// \t\t<Delete />\r\n\t\t\t\t\t\t// \t</IconButton>\r\n\t\t\t\t\t\t// </li>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</ul>\r\n\t\t\t<div>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant={props.filter === \"All\" ? \"contained\" : \"outlined\"}\r\n\t\t\t\t\tcolor={\"secondary\"}\r\n\t\t\t\t\tsize={\"small\"}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tonClickFilterButtonHandler(\"All\", props.todoListID);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tAll\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant={\r\n\t\t\t\t\t\tprops.filter === \"Active\" ? \"contained\" : \"outlined\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolor={\"success\"}\r\n\t\t\t\t\tsize={\"small\"}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tonClickFilterButtonHandler(\"Active\", props.todoListID);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tActive\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant={\r\n\t\t\t\t\t\tprops.filter === \"Completed\" ? \"contained\" : \"outlined\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolor={\"error\"}\r\n\t\t\t\t\tsize={\"small\"}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tonClickFilterButtonHandler(\r\n\t\t\t\t\t\t\t\"Completed\",\r\n\t\t\t\t\t\t\tprops.todoListID\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tCompleted\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n});\r\n\r\n// export const TodoList = (props: TodoListPropsType) => {\r\n// \tconsole.log(\"Todolist called\");\r\n\r\n// \tconst onClickFilterButtonHandler = (\r\n// \t\tfilterValue: FilterValueType,\r\n// \t\ttodoListID: string\r\n// \t) => {\r\n// \t\tprops.filterTasks(filterValue, todoListID);\r\n// \t};\r\n\r\n// \tconst onClickRemoveTaskHandler = (id: string, todolistsID: string) => {\r\n// \t\tprops.removeTask(id, todolistsID);\r\n// \t};\r\n\r\n// \tconst onClickChangeTaskStatusHandler = (\r\n// \t\tid: string,\r\n// \t\tisDone: boolean,\r\n// \t\ttodolistsID: string\r\n// \t) => {\r\n// \t\tprops.changeTaskStatus(id, isDone, todolistsID);\r\n// \t};\r\n\r\n// \tconst editTaskTitle = (\r\n// \t\ttodolistsID: string,\r\n// \t\ttaskID: string,\r\n// \t\ttitle: string\r\n// \t) => {\r\n// \t\tprops.editTaskTitle(todolistsID, taskID, title);\r\n// \t};\r\n\r\n// \tconst editTodoListTitle = (todolistsID: string, title: string) => {\r\n// \t\tprops.editTodoListTitle(todolistsID, title);\r\n// \t};\r\n\r\n// \tconst addTODO = useCallback((task: string) => {\r\n// \t\tprops.addTODO(task, props.todoListID);\r\n// \t}, []);\r\n\r\n// \treturn (\r\n// \t\t<div>\r\n// \t\t\t<div>\r\n// \t\t\t\t<EditableSpan\r\n// \t\t\t\t\ttitle={props.title}\r\n// \t\t\t\t\tonChange={(title) => {\r\n// \t\t\t\t\t\teditTodoListTitle(props.todoListID, title);\r\n// \t\t\t\t\t}}\r\n// \t\t\t\t/>\r\n// \t\t\t\t<IconButton\r\n// \t\t\t\t\tonClick={() => {\r\n// \t\t\t\t\t\tprops.removeTodoList(props.todoListID);\r\n// \t\t\t\t\t}}\r\n// \t\t\t\t>\r\n// \t\t\t\t\t<Delete />\r\n// \t\t\t\t</IconButton>\r\n// \t\t\t</div>\r\n\r\n// \t\t\t<TodoListInputFull callBack={addTODO} />\r\n// \t\t\t<ul>\r\n// \t\t\t\t{props.tasks.map((task) => {\r\n// \t\t\t\t\treturn (\r\n// \t\t\t\t\t\t<li key={task.id}>\r\n// \t\t\t\t\t\t\t<Checkbox\r\n// \t\t\t\t\t\t\t\t// {...label}\r\n// \t\t\t\t\t\t\t\tchecked={task.isDone}\r\n// \t\t\t\t\t\t\t\tonChange={(\r\n// \t\t\t\t\t\t\t\t\tevent: ChangeEvent<HTMLInputElement>\r\n// \t\t\t\t\t\t\t\t) =>\r\n// \t\t\t\t\t\t\t\t\tonClickChangeTaskStatusHandler(\r\n// \t\t\t\t\t\t\t\t\t\ttask.id,\r\n// \t\t\t\t\t\t\t\t\t\tevent.currentTarget.checked,\r\n// \t\t\t\t\t\t\t\t\t\tprops.todoListID\r\n// \t\t\t\t\t\t\t\t\t)\r\n// \t\t\t\t\t\t\t\t}\r\n// \t\t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t\t<EditableSpan\r\n// \t\t\t\t\t\t\t\ttitle={task.title}\r\n// \t\t\t\t\t\t\t\tonChange={(title) => {\r\n// \t\t\t\t\t\t\t\t\teditTaskTitle(\r\n// \t\t\t\t\t\t\t\t\t\tprops.todoListID,\r\n// \t\t\t\t\t\t\t\t\t\ttask.id,\r\n// \t\t\t\t\t\t\t\t\t\ttitle\r\n// \t\t\t\t\t\t\t\t\t);\r\n// \t\t\t\t\t\t\t\t}}\r\n// \t\t\t\t\t\t\t/>\r\n\r\n// \t\t\t\t\t\t\t<IconButton\r\n// \t\t\t\t\t\t\t\tonClick={() => {\r\n// \t\t\t\t\t\t\t\t\tonClickRemoveTaskHandler(\r\n// \t\t\t\t\t\t\t\t\t\ttask.id,\r\n// \t\t\t\t\t\t\t\t\t\tprops.todoListID\r\n// \t\t\t\t\t\t\t\t\t);\r\n// \t\t\t\t\t\t\t\t}}\r\n// \t\t\t\t\t\t\t>\r\n// \t\t\t\t\t\t\t\t<Delete />\r\n// \t\t\t\t\t\t\t</IconButton>\r\n// \t\t\t\t\t\t</li>\r\n// \t\t\t\t\t);\r\n// \t\t\t\t})}\r\n// \t\t\t</ul>\r\n// \t\t\t<div>\r\n// \t\t\t\t<Button\r\n// \t\t\t\t\tvariant={props.filter === \"All\" ? \"contained\" : \"outlined\"}\r\n// \t\t\t\t\tcolor={\"secondary\"}\r\n// \t\t\t\t\tsize={\"small\"}\r\n// \t\t\t\t\tonClick={() => {\r\n// \t\t\t\t\t\tonClickFilterButtonHandler(\"All\", props.todoListID);\r\n// \t\t\t\t\t}}\r\n// \t\t\t\t>\r\n// \t\t\t\t\tAll\r\n// \t\t\t\t</Button>\r\n// \t\t\t\t<Button\r\n// \t\t\t\t\tvariant={\r\n// \t\t\t\t\t\tprops.filter === \"Active\" ? \"contained\" : \"outlined\"\r\n// \t\t\t\t\t}\r\n// \t\t\t\t\tcolor={\"success\"}\r\n// \t\t\t\t\tsize={\"small\"}\r\n// \t\t\t\t\tonClick={() => {\r\n// \t\t\t\t\t\tonClickFilterButtonHandler(\"Active\", props.todoListID);\r\n// \t\t\t\t\t}}\r\n// \t\t\t\t>\r\n// \t\t\t\t\tActive\r\n// \t\t\t\t</Button>\r\n// \t\t\t\t<Button\r\n// \t\t\t\t\tvariant={\r\n// \t\t\t\t\t\tprops.filter === \"Completed\" ? \"contained\" : \"outlined\"\r\n// \t\t\t\t\t}\r\n// \t\t\t\t\tcolor={\"error\"}\r\n// \t\t\t\t\tsize={\"small\"}\r\n// \t\t\t\t\tonClick={() => {\r\n// \t\t\t\t\t\tonClickFilterButtonHandler(\r\n// \t\t\t\t\t\t\t\"Completed\",\r\n// \t\t\t\t\t\t\tprops.todoListID\r\n// \t\t\t\t\t\t);\r\n// \t\t\t\t\t}}\r\n// \t\t\t\t>\r\n// \t\t\t\t\tCompleted\r\n// \t\t\t\t</Button>\r\n// \t\t\t</div>\r\n// \t\t</div>\r\n// \t);\r\n// };\r\n","import * as React from \"react\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\n\r\nexport const ButtonAppBar = () => {\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography\r\n                        variant=\"h6\"\r\n                        component=\"div\"\r\n                        sx={{ flexGrow: 1 }}\r\n                    >\r\n                        Todo\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n};\r\n","import { TodoListsType, FilterValueType } from \"../App\";\r\nimport { v1 } from \"uuid\";\r\n\r\ntype ActionsType =\r\n\t| RemoveTodoListActionType\r\n\t| AddTodoListActionType\r\n\t| ChangeTodolistTitleActionType\r\n\t| ChangeTodolistFilterActionType;\r\n\r\nconst REMOVE_TODOLIST = \"REMOVE_TODOLIST\";\r\nconst ADD_TODOLIST = \"ADD_TODOLIST\";\r\nconst CHANGE_TODOLIST_TITLE = \"CHANGE_TODOLIST_TITLE\";\r\nconst CHANGE_TODOLIST_FILTER = \"CHANGE_TODOLIST_FILTER\";\r\n\r\nexport type RemoveTodoListActionType = {\r\n\ttype: typeof REMOVE_TODOLIST;\r\n\ttodolistId: string;\r\n};\r\n\r\nexport type AddTodoListActionType = {\r\n\ttype: typeof ADD_TODOLIST;\r\n\ttitle: string;\r\n\ttodoListId: string;\r\n};\r\n\r\nexport type ChangeTodolistTitleActionType = {\r\n\ttype: typeof CHANGE_TODOLIST_TITLE;\r\n\tid: string;\r\n\ttitle: string;\r\n};\r\n\r\nexport type ChangeTodolistFilterActionType = {\r\n\ttype: typeof CHANGE_TODOLIST_FILTER;\r\n\tid: string;\r\n\tfilter: FilterValueType;\r\n};\r\n\r\nconst initialState: Array<TodoListsType> = [];\r\n\r\nexport const todoListsReducer = (\r\n\tstate: Array<TodoListsType> = initialState,\r\n\taction: ActionsType\r\n): Array<TodoListsType> => {\r\n\tswitch (action.type) {\r\n\t\tcase REMOVE_TODOLIST: {\r\n\t\t\treturn state.filter((td) => td.id !== action.todolistId);\r\n\t\t}\r\n\r\n\t\tcase ADD_TODOLIST: {\r\n\t\t\tconst newTodoList: TodoListsType = {\r\n\t\t\t\tid: action.todoListId,\r\n\t\t\t\ttitle: action.title,\r\n\t\t\t\tfilter: \"All\",\r\n\t\t\t};\r\n\t\t\treturn [...state, newTodoList];\r\n\t\t}\r\n\r\n\t\tcase CHANGE_TODOLIST_TITLE: {\r\n\t\t\treturn state.map((td) =>\r\n\t\t\t\ttd.id === action.id ? { ...td, title: action.title } : td\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tcase CHANGE_TODOLIST_FILTER: {\r\n\t\t\treturn state.map((td) =>\r\n\t\t\t\ttd.id === action.id ? { ...td, filter: action.filter } : td\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport const RemoveTodoListAC = (\r\n\ttodolistId: string\r\n): RemoveTodoListActionType => {\r\n\treturn { type: REMOVE_TODOLIST, todolistId };\r\n};\r\n\r\nexport const AddTodoListAC = (title: string): AddTodoListActionType => {\r\n\treturn { type: ADD_TODOLIST, title, todoListId: v1() };\r\n};\r\n\r\nexport const ChangeTodoListTitleAC = (\r\n\ttodolistID: string,\r\n\ttitle: string\r\n): ChangeTodolistTitleActionType => {\r\n\treturn { type: CHANGE_TODOLIST_TITLE, id: todolistID, title };\r\n};\r\n\r\nexport const ChangeTodoListFilterAC = (\r\n\ttodolistID: string,\r\n\tfilter: FilterValueType\r\n): ChangeTodolistFilterActionType => {\r\n\treturn { type: CHANGE_TODOLIST_FILTER, id: todolistID, filter };\r\n};\r\n","import { TasksType } from \"../App\";\r\nimport { v1 } from \"uuid\";\r\nimport {\r\n    AddTodoListActionType,\r\n    RemoveTodoListActionType,\r\n} from \"./todoLists-reducer\";\r\n\r\nconst ADD_TASK = \"ADD_TASK\";\r\nconst REMOVE_TASK = \"REMOVE_TASK\";\r\nconst CHANGE_TASK_TITLE = \"CHANGE_TASK_TITLE\";\r\nconst CHANGE_TASK_STATUS = \"CHANGE_TASK_STATUS\";\r\nconst REMOVE_TODOLIST = \"REMOVE_TODOLIST\";\r\nconst ADD_TODOLIST = \"ADD_TODOLIST\";\r\n\r\ntype ActionsType =\r\n    | AddTaskActionType\r\n    | RemoveTaskActionType\r\n    | ChangeTaskTitleActionType\r\n    | ChangeTaskStatusActionType\r\n    | RemoveTodoListActionType\r\n    | AddTodoListActionType;\r\n\r\nexport type AddTaskActionType = {\r\n    type: typeof ADD_TASK;\r\n    todoListId: string;\r\n    title: string;\r\n};\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: typeof REMOVE_TASK;\r\n    todoListId: string;\r\n    taskID: string;\r\n};\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: typeof CHANGE_TASK_TITLE;\r\n    todoListId: string;\r\n    taskID: string;\r\n    title: string;\r\n};\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: typeof CHANGE_TASK_STATUS;\r\n    todoListId: string;\r\n    taskID: string;\r\n    isDone: boolean;\r\n};\r\n\r\nconst initialState: TasksType = {}\r\n\r\nexport const TasksReducer = (\r\n    state: TasksType = initialState,\r\n    action: ActionsType\r\n): TasksType => {\r\n    switch (action.type) {\r\n        case ADD_TASK: {\r\n            const task = { id: v1(), title: action.title, isDone: false };\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: [task, ...state[action.todoListId]],\r\n            };\r\n        }\r\n        case REMOVE_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(\r\n                    (task) => task.id !== action.taskID\r\n                ),\r\n            };\r\n        }\r\n        case CHANGE_TASK_TITLE: {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map((task) =>\r\n                    task.id === action.taskID\r\n                        ? { ...task, title: action.title }\r\n                        : task\r\n                ),\r\n            };\r\n        }\r\n        case CHANGE_TASK_STATUS: {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map((task) =>\r\n                    task.id === action.taskID\r\n                        ? { ...task, isDone: action.isDone }\r\n                        : task\r\n                ),\r\n            };\r\n        }\r\n        case REMOVE_TODOLIST: {\r\n            let copyState = { ...state };\r\n            delete copyState[action.todolistId];\r\n            return copyState;\r\n        }\r\n        case ADD_TODOLIST: {\r\n            return { ...state, [action.todoListId]: [] };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const AddTaskAC = (\r\n    todoListId: string,\r\n    title: string\r\n): AddTaskActionType => {\r\n    return { type: ADD_TASK, todoListId, title };\r\n};\r\n\r\nexport const RemoveTaskAC = (\r\n    todoListId: string,\r\n    taskID: string\r\n): RemoveTaskActionType => {\r\n    return { type: REMOVE_TASK, todoListId, taskID };\r\n};\r\n\r\nexport const ChangeTaskTitleAC = (\r\n    todoListId: string,\r\n    taskID: string,\r\n    title: string\r\n): ChangeTaskTitleActionType => {\r\n    return { type: CHANGE_TASK_TITLE, todoListId, taskID, title };\r\n};\r\n\r\nexport const ChangeTaskStatusAC = (\r\n    todoListId: string,\r\n    taskID: string,\r\n    isDone: boolean\r\n): ChangeTaskStatusActionType => {\r\n    return { type: CHANGE_TASK_STATUS, todoListId, taskID, isDone };\r\n};\r\n","import React, { useCallback } from \"react\";\r\nimport \"./App.css\";\r\nimport { TodoList, TodoListTaskType } from \"./components/TodoList\";\r\nimport { TodoListInputFull } from \"./components/TodoListInputFull\";\r\nimport { ButtonAppBar } from \"./components/ButtonAppBar\";\r\nimport { Container } from \"@mui/system\";\r\nimport Grid from \"@mui/material/Grid/Grid\";\r\nimport Paper from \"@mui/material/Paper/Paper\";\r\nimport {\r\n\tRemoveTodoListAC,\r\n\tAddTodoListAC,\r\n\tChangeTodoListFilterAC,\r\n\tChangeTodoListTitleAC,\r\n} from \"./state/todoLists-reducer\";\r\nimport {\r\n\tAddTaskAC,\r\n\tChangeTaskStatusAC,\r\n\tChangeTaskTitleAC,\r\n\tRemoveTaskAC,\r\n} from \"./state/tasks-reducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"./state/store\";\r\n\r\nexport type FilterValueType = \"All\" | \"Active\" | \"Completed\";\r\n\r\nexport type TodoListsType = {\r\n\tid: string;\r\n\ttitle: string;\r\n\tfilter: FilterValueType;\r\n};\r\n\r\nexport type TasksType = {\r\n\t[key: string]: Array<TodoListTaskType>;\r\n};\r\n\r\nfunction AppWithReducers() {\r\n\tconst todolists = useSelector<AppRootStateType, Array<TodoListsType>>(\r\n\t\t(state) => state.todolist\r\n\t);\r\n\tconst tasks = useSelector<AppRootStateType, TasksType>(\r\n\t\t(state) => state.tasks\r\n\t);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst addTodoList = useCallback(\r\n\t\t(title: string) => {\r\n\t\t\tconst action = AddTodoListAC(title);\r\n\t\t\tdispatch(action);\r\n\t\t},\r\n\t\t[dispatch]\r\n\t);\r\n\r\n\tconst addTODO = useCallback(\r\n\t\t(title: string, todoListID: string) => {\r\n\t\t\tconst action = AddTaskAC(todoListID, title);\r\n\t\t\tdispatch(action);\r\n\t\t},\r\n\t\t[dispatch]\r\n\t);\r\n\r\n\tconst removeTodoList = useCallback(\r\n\t\t(todoListID: string) => {\r\n\t\t\tconst action = RemoveTodoListAC(todoListID);\r\n\t\t\tdispatch(action);\r\n\t\t},\r\n\t\t[dispatch]\r\n\t);\r\n\r\n\tconst changeTaskStatus = useCallback(\r\n\t\t(taskID: string, isDone: boolean, todolistsID: string) => {\r\n\t\t\tconst action = ChangeTaskStatusAC(todolistsID, taskID, isDone);\r\n\t\t\tdispatch(action);\r\n\t\t},\r\n\t\t[dispatch]\r\n\t);\r\n\r\n\tconst filterTasks = useCallback(\r\n\t\t(filetValue: FilterValueType, todolistsID: string) => {\r\n\t\t\tconst action = ChangeTodoListFilterAC(todolistsID, filetValue);\r\n\t\t\tdispatch(action);\r\n\t\t},\r\n\t\t[dispatch]\r\n\t);\r\n\r\n\tconst removeTask = useCallback(\r\n\t\t(taskID: string, todolistsID: string) => {\r\n\t\t\tconst action = RemoveTaskAC(todolistsID, taskID);\r\n\t\t\tdispatch(action);\r\n\t\t},\r\n\t\t[dispatch]\r\n\t);\r\n\r\n\tconst editTaskTitle = useCallback(\r\n\t\t(todolistsID: string, taskID: string, title: string) => {\r\n\t\t\tconst action = ChangeTaskTitleAC(todolistsID, taskID, title);\r\n\t\t\tdispatch(action);\r\n\t\t},\r\n\t\t[dispatch]\r\n\t);\r\n\r\n\tconst editTodoListTitle = useCallback(\r\n\t\t(todolistsID: string, title: string) => {\r\n\t\t\tconst action = ChangeTodoListTitleAC(todolistsID, title);\r\n\t\t\tdispatch(action);\r\n\t\t},\r\n\t\t[dispatch]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<ButtonAppBar />\r\n\t\t\t<Container fixed>\r\n\t\t\t\t<Grid container style={{ padding: \"10px\" }}>\r\n\t\t\t\t\t<TodoListInputFull callBack={addTodoList} />\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t{todolists.map((td) => {\r\n\t\t\t\t\t\tlet filteredTasks = tasks[td.id];\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Grid key={td.id} item>\r\n\t\t\t\t\t\t\t\t<Paper style={{ padding: \"10px\" }}>\r\n\t\t\t\t\t\t\t\t\t<TodoList\r\n\t\t\t\t\t\t\t\t\t\t// key={td.id}\r\n\t\t\t\t\t\t\t\t\t\ttodoListID={td.id}\r\n\t\t\t\t\t\t\t\t\t\tfilter={td.filter}\r\n\t\t\t\t\t\t\t\t\t\ttitle={td.title}\r\n\t\t\t\t\t\t\t\t\t\ttasks={filteredTasks}\r\n\t\t\t\t\t\t\t\t\t\tremoveTask={removeTask}\r\n\t\t\t\t\t\t\t\t\t\tfilterTasks={filterTasks}\r\n\t\t\t\t\t\t\t\t\t\taddTODO={addTODO}\r\n\t\t\t\t\t\t\t\t\t\tchangeTaskStatus={changeTaskStatus}\r\n\t\t\t\t\t\t\t\t\t\tremoveTodoList={removeTodoList}\r\n\t\t\t\t\t\t\t\t\t\teditTaskTitle={editTaskTitle}\r\n\t\t\t\t\t\t\t\t\t\teditTodoListTitle={editTodoListTitle}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</Grid>\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default AppWithReducers;\r\n","import { combineReducers } from \"redux\";\r\nimport { legacy_createStore as createStore} from 'redux'\r\nimport {todoListsReducer} from \"./todoLists-reducer\";\r\nimport { TasksReducer } from \"./tasks-reducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n\ttodolist: todoListsReducer,\r\n\ttasks: TasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n// import App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n// import AppWithReducers from \"./AppWithReducers\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\nimport { store } from \"./state/store\"\r\nimport { Provider } from 'react-redux'\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<AppWithRedux />\r\n\t</Provider>,\r\ndocument.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}