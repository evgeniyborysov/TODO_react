{"version":3,"sources":["components/Button.tsx","components/Input.tsx","components/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","className","onClick","callBack","name","Input","value","inputValue","onChange","event","setInputValue","currentTarget","onKeyPress","setError","key","addTODO","TodoList","useState","error","onClickFilterButtonHandler","filterValue","todoListID","filterTasks","task","trim","title","removeTodoList","tasks","map","id","type","checked","isDone","todolistsID","changeTaskStatus","removeTask","filter","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","td","taskID","find","filetValue","todolist","tl","filteredTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3953cb04.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    className?: string;\r\n    name: string;\r\n    callBack: () => void;\r\n};\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    const onClickButtonHandler = () => {\r\n        props.callBack();\r\n    };\r\n\r\n    return (\r\n        <button\r\n            className={props.className}\r\n            onClick={() => {\r\n                onClickButtonHandler();\r\n            }}\r\n        >\r\n            {props.name}\r\n        </button>\r\n    );\r\n};\r\n","import React, { ChangeEvent, KeyboardEvent } from \"react\";\r\n\r\ntype InputPropsType = {\r\n    todoListID: string;\r\n    className: string;\r\n    inputValue: string;\r\n    setInputValue: (inputValue: string) => void;\r\n    addTODO: () => void;\r\n    setError: (error: string | null) => void;\r\n};\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.setInputValue(event.currentTarget.value);\r\n    };\r\n    const onKeyPressInputHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        props.setError(null);\r\n        if (event.key === \"Enter\") {\r\n            props.setInputValue(event.currentTarget.value);\r\n            props.addTODO();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <input\r\n            className={props.className}\r\n            value={props.inputValue}\r\n            onChange={onChangeInputHandler}\r\n            onKeyPress={onKeyPressInputHandler}\r\n        />\r\n    );\r\n};\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport { FilterValueType } from \"../App\";\r\nimport { Button } from \"./Button\";\r\nimport { Input } from \"./Input\";\r\n// import { TodoListInputFull } from \"./TodoListInputFull\";\r\n\r\nexport type TodoListTaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n};\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string;\r\n    filter: FilterValueType;\r\n\r\n    title: string;\r\n    tasks: Array<TodoListTaskType>;\r\n    removeTask: (taskID: string, todolistsID: string) => void;\r\n    filterTasks: (filetValue: FilterValueType, todoListID: string) => void;\r\n    addTODO: (title: string, todoListID: string) => void;\r\n    changeTaskStatus: (\r\n        taskID: string,\r\n        isDone: boolean,\r\n        todolistsID: string\r\n    ) => void;\r\n    removeTodoList: (todoListID: string) => void;\r\n};\r\n\r\nexport const TodoList = (props: TodoListPropsType) => {\r\n    let [inputValue, setInputValue] = useState<string>(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const onClickFilterButtonHandler = (\r\n        filterValue: FilterValueType,\r\n        todoListID: string\r\n    ) => {\r\n        props.filterTasks(filterValue, todoListID);\r\n    };\r\n\r\n    const onClickRemoveTaskHandler = (id: string, todolistsID: string) => {\r\n        props.removeTask(id, todolistsID);\r\n    };\r\n\r\n    const onClickChangeTaskStatusHandler = (\r\n        id: string,\r\n        isDone: boolean,\r\n        todolistsID: string\r\n    ) => {\r\n        props.changeTaskStatus(id, isDone, todolistsID);\r\n    };\r\n\r\n    const addTODO = () => {\r\n        const task = inputValue.trim();\r\n        if (task !== \"\") {\r\n            props.addTODO(task, props.todoListID);\r\n            setInputValue(\"\");\r\n        } else {\r\n            setError(\"Title is required!\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>{props.title}</h3>\r\n                <Button\r\n                    name={\"âœ–\"}\r\n                    callBack={() => props.removeTodoList(props.todoListID)}\r\n                />\r\n            </div>\r\n\r\n            {/* <TodoListInputFull addTask={props.addTask} /> */}\r\n            <Input\r\n                className={error ? \"error\" : \"\"}\r\n                inputValue={inputValue}\r\n                setInputValue={setInputValue}\r\n                addTODO={addTODO}\r\n                setError={setError}\r\n                todoListID={props.todoListID}\r\n            />\r\n            <Button name={\"+\"} callBack={addTODO} />\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n            <ul>\r\n                {props.tasks.map((task) => {\r\n                    return (\r\n                        <li key={task.id}>\r\n                            <label>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={task.isDone}\r\n                                    onChange={(\r\n                                        event: ChangeEvent<HTMLInputElement>\r\n                                    ) =>\r\n                                        onClickChangeTaskStatusHandler(\r\n                                            task.id,\r\n                                            event.currentTarget.checked,\r\n                                            props.todoListID\r\n                                        )\r\n                                    }\r\n                                />\r\n                                <span className={task.isDone ? \"isDone\" : \"\"}>\r\n                                    {task.title}\r\n                                </span>\r\n                            </label>\r\n\r\n                            <Button\r\n                                name={\"âœ–\"}\r\n                                callBack={() =>\r\n                                    onClickRemoveTaskHandler(\r\n                                        task.id,\r\n                                        props.todoListID\r\n                                    )\r\n                                }\r\n                            />\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    className={props.filter === \"All\" ? \"active\" : \"\"}\r\n                    name={\"All\"}\r\n                    callBack={() =>\r\n                        onClickFilterButtonHandler(\"All\", props.todoListID)\r\n                    }\r\n                />\r\n                <Button\r\n                    className={props.filter === \"Active\" ? \"active\" : \"\"}\r\n                    name={\"Active\"}\r\n                    callBack={() =>\r\n                        onClickFilterButtonHandler(\"Active\", props.todoListID)\r\n                    }\r\n                />\r\n                <Button\r\n                    className={props.filter === \"Completed\" ? \"active\" : \"\"}\r\n                    name={\"Completed\"}\r\n                    callBack={() =>\r\n                        onClickFilterButtonHandler(\r\n                            \"Completed\",\r\n                            props.todoListID\r\n                        )\r\n                    }\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { TodoList, TodoListTaskType } from \"./components/TodoList\";\r\nimport { v1 } from \"uuid\";\r\n\r\nexport type FilterValueType = \"All\" | \"Active\" | \"Completed\";\r\n\r\ntype TodoListsType = {\r\n    id: string;\r\n    title: string;\r\n    filter: FilterValueType;\r\n};\r\n\r\ntype TasksType = {\r\n    [key: string]: Array<TodoListTaskType>;\r\n};\r\n\r\nfunction App() {\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodoListsType>>([\r\n        { id: todolistID1, title: \"What to learn\", filter: \"All\" },\r\n        { id: todolistID2, title: \"What to buy\", filter: \"All\" },\r\n    ]);\r\n\r\n    let [tasks, setTasks] = useState<TasksType>({\r\n        [todolistID1]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true },\r\n            { id: v1(), title: \"ReactJS\", isDone: false },\r\n            { id: v1(), title: \"Rest API\", isDone: false },\r\n            { id: v1(), title: \"GraphQL\", isDone: false },\r\n        ],\r\n        [todolistID2]: [\r\n            { id: v1(), title: \"HTML&CSS2\", isDone: true },\r\n            { id: v1(), title: \"JS2\", isDone: true },\r\n            { id: v1(), title: \"ReactJS2\", isDone: false },\r\n            { id: v1(), title: \"Rest API2\", isDone: false },\r\n            { id: v1(), title: \"GraphQL2\", isDone: false },\r\n        ],\r\n    });\r\n\r\n    const removeTodoList = (todoListID: string) => {\r\n        setTodolists(todolists.filter((td) => td.id !== todoListID));\r\n        delete tasks[todoListID];\r\n        setTasks({ ...tasks });\r\n    };\r\n\r\n    const addTODO = (title: string, todoListID: string) => {\r\n        const task = { id: v1(), title: title, isDone: false };\r\n        // const todolistTasks = tasks[todoListID];\r\n        // const newTasks = [task, ...todolistTasks];\r\n        // tasks[todoListID] = newTasks;\r\n        setTasks({ ...tasks, [todoListID]: [task, ...tasks[todoListID]] });\r\n    };\r\n\r\n    const changeTaskStatus = (\r\n        taskID: string,\r\n        isDone: boolean,\r\n        todolistsID: string\r\n    ) => {\r\n        let todoListTasks = tasks[todolistsID];\r\n        let task = todoListTasks.find((task) => task.id === taskID);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({ ...tasks });\r\n        }\r\n    };\r\n\r\n    function filterTasks(filetValue: FilterValueType, todolistsID: string) {\r\n        let todolist = todolists.find((tl) => tl.id === todolistsID);\r\n        if (todolist) {\r\n            todolist.filter = filetValue;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    function removeTask(taskID: string, todolistsID: string) {\r\n        // tasks = tasks.filter((task) => task.id !== taskID);\r\n        // setTasks(tasks);\r\n        setTasks({\r\n            ...tasks,\r\n            [todolistsID]: tasks[todolistsID].filter(\r\n                (task) => task.id !== taskID\r\n            ),\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map((td) => {\r\n                let filteredTasks = tasks[td.id];\r\n\r\n                if (td.filter === \"Active\") {\r\n                    filteredTasks = filteredTasks.filter(\r\n                        (task) => !task.isDone\r\n                    );\r\n                }\r\n                if (td.filter === \"Completed\") {\r\n                    filteredTasks = filteredTasks.filter((task) => task.isDone);\r\n                }\r\n                return (\r\n                    <TodoList\r\n                        key={td.id}\r\n                        todoListID={td.id}\r\n                        filter={td.filter}\r\n                        title={td.title}\r\n                        tasks={filteredTasks}\r\n                        removeTask={removeTask}\r\n                        filterTasks={filterTasks}\r\n                        addTODO={addTODO}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}